.categories ['PrettyFaces']
.dateCreated 20110515T12:15:27
.date_modified 20110517T15:08:10
.date_modified_gmt 20110517T19:08:10
.link http://ocpsoft.org/prettyfaces/serving-dynamic-file-content-with-prettyfaces/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords 
.permaLink http://ocpsoft.org/prettyfaces/serving-dynamic-file-content-with-prettyfaces/
.post_status publish
.postid 1723
.title Serving dynamic file content with PrettyFaces
.userid 13
.wp_author_display_name Christian Kaltepoth
.wp_author_id 13
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 
.wp_slug serving-dynamic-file-content-with-prettyfaces
<a href="http://ocpsoft.com/prettyfaces/">PrettyFaces</a> offers a very simple and flexible way to create bookmark-able RESTful URLs in JSF applications. This short article will show you how easy it is to use PrettyFaces for serving other dynamic content like images or PDF files.

Many applications are required to generate some kind of "dynamic" content for the user. A typical example are product images in a web shop. These are mostly not deployed with the application archive but rather stored in an external directory or a database. Another example are PDF reports that are generated on demand when a user requests them.
<!--more-->
Some component suite offer custom components for these kinds of requirements, for example <a href="http://primefaces.org/">PrimeFaces</a> with <a href="http://www.primefaces.org/showcase/ui/dynamicImage.jsf">&lt;p:graphicImage&gt;</a> or <a href="http://jboss.org/richfaces">RichFaces</a> with <a href="http://docs.jboss.org/richfaces/latest_3_3_X/en/devguide/html/rich_paint2D.html">&lt;rich:paint2d&gt;</a>. But these components are often only able to render images and don't offer full control over the HTTP response headers. Another option is to write a custom servlet, but this would require to manually parse the request URL and doesn't integrate well with the rest of the JSF application.

Interested in a very <em>pretty</em> way of implementing dynamic content? I will present a simple class that demonstrates how to use PrettyFaces to dynamically creating <a href="http://en.wikipedia.org/wiki/Barcode">barcodes</a>. 

<center><a href="http://ocpsoft.com/wp-content/uploads/2010/11/barcode-1234567890.png"><img src="http://ocpsoft.com/wp-content/uploads/2010/11/barcode-1234567890.png" alt="example barcode" title="barcode-1234567890" width="148" height="105" class="size-full wp-image-1751" /></a> </center>

Take a look at this class:

<pre lang="java">
@ManagedBean
@RequestScoped
@URLMapping(id = "barcode", viewId = "/empty.jsf", 
    pattern = "/barcode/#{ /[0-9]+/ barcodeBean.value }.png")
public class BarcodeBean {

  private String value;

  @URLAction
  public void render() throws IOException {

    // get HttpServletResponse
    FacesContext context = FacesContext.getCurrentInstance();
    HttpServletResponse response = 
      (HttpServletResponse) context.getExternalContext().getResponse();
    
    // set correct content type
    response.setContentType("image/png");

    // setup CanvasProvider to render bitmap to response stream
    BitmapCanvasProvider canvas = new BitmapCanvasProvider(
        response.getOutputStream(), "image/png", 150,
        BufferedImage.TYPE_BYTE_BINARY, false, 0);

    // render barcode
    Interleaved2Of5Bean barcode = new Interleaved2Of5Bean();
    barcode.generateBarcode(canvas, value);
    canvas.finish();

    // mark response as completed
    context.responseComplete();

  }

  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }

}
</pre>

If you have some experience with PrettyFaces, this code will look very familiar. The class defines an URL mapping using the annotation support added in PrettyFaces 3.1.0. The URL pattern matches URLs that look like regular PNG files (for example <code>/barcode/1234567890.png</code>). The file name (excluding the extension) is automatically injected into the value field of the bean. The pattern restricts the value to be numeric, which is required for the barcode we want to generate.

Please note that the bean specifies <code>/empty.jsf</code> as the view id to render for the mapping. Unfortunately we need a valid view here to be able to enter the JSF lifecycle with our mapping. As this view won't be rendered, it is possible to use a minimalistic empty view. For this example I created a file <code>/empty.xhtml</code> with the following content:

<pre lang="xml">
<?xml version="1.0" encoding="UTF-8" ?>
<html xmlns="http://www.w3.org/1999/xhtml" />
</pre>

The central method of the bean is called "render" and is annotated with <code>@URLAction</code>. This tells PrettyFaces to execute it if a file matching the URL pattern is accessed. We will use <a href="http://barcode4j.sourceforge.net/">Barcode4J</a> in this example to render the barcode. The method shows the required steps to send the dynamic content to the client:

<ol>
<li>Obtain the <code>HttpServletResponse</code> from the <code>FacesContext</code></li>
<li>Set the correct content type and headers for the response</li>
<li>Generate the dynamic content and write it to the response stream</li>
<li>Call <code>FacesContext.responseComplete()</code></li>
</ol>

That's it! Straight forward, isn't it?

You can now embed such a barcode into a JSF page of our application like this:

<pre lang="xml">
<pretty:urlbuffer var="url" mappingId="barcode" >
  <f:param value="1234567890" />
</pretty:urlbuffer>
<img src="#{url}" alt="barcode" />
</pre>

We are using &lt;pretty:urlbuffer&gt; to generate the required URL. The &lt;f:param&gt; tag sets the value of the path parameter in the mapping. Of cause you can also refer to other bean properties using an EL expression instead of setting a constant value. The generated URL can now be used in a HTML &lt;img&gt; element to actually insert the image into the page.

As you can see serving other resources than HTML files is very easy using PrettyFaces. I've already used this pattern successfully in a number of scenarios like:

<ul>
<li>Serving images from a database</li>
<li>Rendering of chemical molecules using the <a href="http://sourceforge.net/projects/cdk/">CDK</a></li>
<li>Dynamically creation of Microsoft ODC connection files</li>
<li>On-Demand rendering of PDF files</li>
</ul>

The possibilities are limitless, and if you are able to share, we would love for you to post below and let us know how you've used this feature, or used PrettyFaces in general!