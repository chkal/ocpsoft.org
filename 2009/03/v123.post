.categories ['PrettyFaces']
.dateCreated 20090318T21:40:03
.date_modified 20111218T11:47:02
.date_modified_gmt 20111218T16:47:02
.link http://ocpsoft.org/prettyfaces/v123/
.mt_allow_comments 0
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords Java, JSF, PrettyFaces
.permaLink http://ocpsoft.org/prettyfaces/v123/
.post_status publish
.postid 43
.title PrettyFaces v1.1.x, v1.2.x, v2.0.x Docs (legacy)
.userid 3
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 
.wp_slug v123
<h1><a name="configuration"></a>Configuration</h1>
Setting up PrettyFaces is simple.
<!--more-->
<div class="inset"> 
<div style="margin-left: 10px;">
<ol>
	<li><h4><a href="#filters">Configure PrettyFaces Filters in	WEB-INF/web.xml</a></h4><br />
	<br />
	</li>
	<li><h4><a href="#prettyconfig">Create the WEB-INF/pretty-config.xml file</a></h4> <br />
	(Steps 1 &amp; 2 are required. Advanced features are optional.)<br />
	<br />
	</li>
	<li><h4><a href="#application">Advanced Features</a></h4>
	<ul>
		<li><a href="#dynamicviewid">Using dynamic view-ids</a></li>
		<li><a href="#queryparams">Using the managed query-parameter facility</a></li>
		<li><a href="#navigation">Wiring navigation into JSF action methods</a></li>
		<li><a href="#customparsing">Parsing complex / dynamic-length URLs</a></li>
		<li><a href="#elaccess">Accessing PrettyContext through EL</a></li>
	</ul>
	</li>
	<li><h4><a href="#links">Components</a></h4>
	<ul>
		<li><a href="#prettylink">&lt;pretty:link&gt;</a></li>
		<li><a href="#urlbuffer">&lt;pretty:urlbuffer&gt;</a></li>
	</ul>
	</li>
	<li><a href="#logging">Configuring Logging (log4j)</a></li>
</ol>
<div class="clearer"></div>
</div>
</div>

<div class="featured">
<div class="inside">
	<p><span style="color: red">Note:</span> This is not the <a href="http://ocpsoft.com/prettyfaces/docs">current version</a> of PrettyFaces. This page is valid for the 1.1.0, 1.2.x, and 2.0.2 versions.</p>
</div></div>

<h3 style="margin-bottom: 15px;"><a href="#configuration"><strong>0. Get PrettyFaces.</strong></a></h3>
<p>This step is pretty straight-forward, right? Extract necessary JAR files into your /WEB-INF/lib directory, or include a maven dependency in your pom.xml</p>
<pre lang="xml">
<dependency>
	<!-- For JSF1.1 -->
	<groupId>com.ocpsoft</groupId>
	<artifactId>ocpsoft-pretty-faces</artifactId>
	<version>1.1.0</version>
</dependency>
<dependency>
	<!-- For JSF1.2 -->
	<groupId>com.ocpsoft</groupId>
	<artifactId>ocpsoft-pretty-faces</artifactId>
	<version>1.2.6_RC1</version>
</dependency>
<dependency>
	<!-- For JSF2.0 -->
	<groupId>com.ocpsoft</groupId>
	<artifactId>ocpsoft-pretty-faces</artifactId>
	<version>2.0.2_GA</version>
</dependency>
</pre>

<h3 style="margin-bottom: 15px;"><a name="filters"></a><a href="#configuration"><strong>1. Add the &lt;filter&gt; and &lt;filter-mapping&gt; to /WEB-INF/web.xml</strong></a></h3>
<p>PrettyFilter does most of the work. Without it, not much would happen.</p>
<pre lang="xml"><filter>
	<filter-name>Pretty Filter</filter-name>
	<filter-class>com.ocpsoft.pretty.PrettyFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>Pretty Filter</filter-name>
	<url-pattern>/*</url-pattern>
	<dispatcher>REQUEST</dispatcher>
	<dispatcher>FORWARD</dispatcher>
	<dispatcher>ERROR</dispatcher>
</filter-mapping>
</pre>

<h3 style="margin-bottom: 15px;"><a name="prettyconfig"></a><a href="#configuration"><strong>2. Create the /WEB-INF/pretty-config.xml file</strong></a></h3>
<p>This is where you will map URLs to Faces Views. Read on for details.</p>

<pre lang="xml"><pretty-config
	xmlns="http://ocpsoft.com/prettyfaces-xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://ocpsoft.com/prettyfaces-xsd 
	http://ocpsoft.com/xml/ns/prettyfaces/pretty-1.0.xsd">
	<url-mapping id="login">
		<pattern> /login </pattern>
		<view-id> /faces/login.jsf </view-id>
	</url-mapping>
	<url-mapping id="home">
		<pattern> /home </pattern>
		<query-param name="displayWelcomeMessage">#{homeBean.displayWelcomeMessage}</query-param>
		<view-id> #{homeBean.getViewPath} </view-id>
	</url-mapping>
	<url-mapping id="viewStory">
		<pattern>  /story/#{myBean.currentStoryId}/  </pattern>
		<query-param name="commentText" decode="false">#{myBean.commentText}</query-param>
		<view-id> /faces/story/viewStory.jsf </view-id>
		<action onPostback="false">#{myBean.loadStory}</action>
	</url-mapping>
	<url-mapping id="viewComment">
		<pattern> /story/#{myBean.currentStoryId}/#{myBean.commentId} </pattern>
		<view-id>/faces/story/comment.jsf</view-id>
		<action>#{myBean.loadComment}</action>
	</url-mapping>
</pretty-config>
</pre>
<h3>Url Mappings</h3>
<p>Each &lt;url-mapping id=""&gt; must specify a unique id. And contains the following attributes and elements, in order:</p>
<ol>
	<li>
		<h4>&lt;pattern&gt;/blog/article/#{someBean.paramName}&lt;/pattern&gt;</h4>
		<p>Specify the pattern for which this URL will be matched. This element is required, and has a multiplicity of 1 (only one)</p>
		<p>Any EL expressions #{someBean.paramName} found within the pattern will be processed as value injections. The URL will be parsed and the value found at the location of the EL expression will be injected into the location specified in that EL expression. <i><span style="color:red;">Note:</span> EL expressions will not match over the '/' character.</i></p>
		<p>The pattern itself is compiled parsed as a <a href="http://java.sun.com/javase/6/docs/api/java/util/regex/Pattern.html">regular expression</a>, meaning that the actual URL matching can be as simple or as complex as desired.</p>
		<p>If further custom URL parsing is required, it is recommended to do this manually via an Action Method: See <a href="#customparsing">custom parsing</a>.</p>  
	</li>
	<li>
		<h4>&lt;query-param name="key"&gt;#{someBean.queryParamValue}&lt;/query-param&gt;</h4>
		<p>Defines a managed query parameter of the form http://site.com/url?<b>key=somevalue</b>, where if the parameter exists, the value will be injected into the specified managed bean. <i>This also handles JSF commandLink and AJAX &lt;f:param&gt; values.</i> This element is optional, and has a multiplicity of 0...N (zero or more)</p>
		<p><i>Attributes:</i></p>
		<ol>
			<li><strong>name</strong> -- String, required. This is the request value key</li>
			<li><strong>decode</strong> -- boolean, optional (default true), if set to false, this query-param will not be URLDecoded (see <a href="http://java.sun.com/javase/6/docs/api/java/net/URLDecoder.html">java.net.URLDecoder</a>)</li>
		</ol>
	</li>
	<li>
		<h4>&lt;view-id&gt;#{someBean.methodName}&lt;view-id&gt;</h4>
		<p>Specify the JSF ViewId displayed by this mapping, by either calling an el Method (must return an object for which the toString() method will return the view Id) or by returning a literal String value. This element is required, and has a multiplicity of 1 (only one)</p>
		<p>The ViewId may be any resource located within the current Servlet Context: E.g. PrettyFaces can also forward to a non-Faces servlet.</p>
	</li>
	<li>
		<h4>&lt;action&gt;#{someBean.methodName}&lt;/action&gt;</h4>
		<p>Specify an action method to be called after URL parameters have been parsed and assigned into beans. This element has a multiplicity of 0...N (zero or more)</p>
		<p><i>Attributes:</i></p>
		<ol>
			<li>
				<p><strong>phaseId</strong> -- String, optional (default RESTORE_VIEW) if set to a valid JSF PhaseId, the action will occur immediately before the specified Phase. (see <a href="http://java.sun.com/javaee/javaserverfaces/1.2/docs/api/javax/faces/event/PhaseId.html">javax.faces.event.PhaseId</a>)</p>
				<p>Valid values for this attribute are: RESTORE_VIEW, APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS,	UPDATE_MODEL_VALUES, INVOKE_APPLICATION, RENDER_RESPONSE, ANY_PHASE.<p> <strong><span style="color: red">Note however</span></strong>, that if the phase does not occur, neither will your action method.</p>
			</li>
			<li>
				<p><strong>onPostback</strong> -- boolean, optional (default true), if set to false, this	action method will not occur on form postback. (see <a href="http://java.sun.com/javaee/javaserverfaces/1.2/docs/api/javax/faces/render/ResponseStateManager.html#isPostback(javax.faces.context.FacesContext)">ResponseStateManager.isPostback()</a>)</p>
			</li>
		</ol>
	</li>
</ol>
<h3>Order of processing:</h3>
<p>
<ol>
	<li>URL pattern parsing, query-parameter handling, and value injection into JSF managed beans.</li>
	<li>View-Id calculation (if a view Id is dynamic, the el method	will be called.)</li>
	<li>JSF gains control of the request via RequestDispatcher.forward("/context/faces/viewId.jsf").</li>
	<li>Action methods are called before RESTORE_VIEW phase, unless the optional phaseId attribute is specified.</li>
</ol>
</p>
<h3>Config Loading:</h3>
<p>At application startup time, before any requests are processed, Pretty Faces processes zero or more configuration resources, located according to the following algorithm:</p>
<p>
<ol>
	<li>Search for classpath resources named <span class="code">META-INF/pretty-config.xml</span>
	in the ServletContext resource paths for this web application, and load each as a configuration resource.</li>
	<li>Check for the existence of a context initialization parameter named <span class="code">com.ocpsoft.pretty.CONFIG_FILES</span>. If it exists, treat it as a comma-delimited list of context relative resource paths (starting with a <span class="code">/</span>), and load each of the specfied resources.</li>
	<li>Check for the existence of a web application configuration resource named <span class="code">/WEB-INF/pretty-config.xml</span>, and load it if the resource exists.</li>
</ol>
</p>
<h3 style="margin-bottom: 15px;"><a name="application"></a><a href="#configuration"><strong>3. Advanced Features</strong></a></h3>

<h4 style="margin-bottom: 15px;"><a name="dynamicviewid"></a><a href="#configuration"><strong>3.1 Using Dynamic View ID Capabilities</strong></a></h4>
Dynamic view IDs allow a mapped URL to display content from any JSF view. This is prevents doing redirects which would otherwise destroy information stored in the URL, and also provides some extra functionality for application design.

This pretty-config mapping uses a dynamic view-id:

<pre lang="xml"><pretty-config
	xmlns="http://ocpsoft.com/prettyfaces-xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://ocpsoft.com/prettyfaces-xsd 
	http://ocpsoft.com/xml/ns/prettyfaces/pretty-1.0.xsd">
	<url-mapping id="home">
		<pattern> /home </pattern>
		<query-param name="displayWelcomeMessage">#{homeBean.displayWelcomeMessage}</query-param>
		<view-id> #{homeBean.getViewPath} </view-id>
	</url-mapping>
</pretty-config>
</pre>

The corresponding backing-bean method must return a JSF ViewID, which will proceed with the faces lifecycle (leaving the URL /home), or a pretty:mappingId. In the case when a pretty:mappingId is returned, PrettyFaces will "switch mappings" and instead treat the request as if it had been sent to the new mappingId, without issuing a browser redirect.
<pre lang="java">public class ManagedBean
{
    public String getViewPath()
    {
        // This method returns the path of the JSF view to display
        // when the URL /home is accessed.
        if(user.isLoggedIn())
        {
        	// Note: the extension '.jsf' is the mapped faces extension
        	return "/faces/home.jsf";
        }
        
        // The home page can instead display a different view; return
        // the pretty:mappingId of the view you wish to display.
        // Note that this will not cause a redirect, and will not 
        // change the client browser URL.
        // If you wish to issue a redirect, you should use a page
        // load action instead of a dynamic view Id function.
        return "pretty:login";
    }
}
</pre>
<h4 style="margin-bottom: 15px;"><a name="queryparams"></a><a href="#configuration"><strong>3.2 Using the Managed Query Parameter facility</strong></a></h4>
Managed query parameters allow automatic assignment of values into JSF managed bean fields, instead of parsing and URL Decoding the value manually out of the request object. Examining this sample mapping, we can see that the developer has specified two managed query-parameters. The 'sortBy' and 'itemId' parameters.
<pre lang="xml"><pretty-config>
	<url-mapping id="itemList">
		<pattern> /items/list </pattern>
		<query-param name="sortBy">#{itemBean.sortByField}</query-param>
		<query-param name="itemId">#{itemBean.currentItemId}</query-param>
		<view-id> /faces/items/list.jsf </view-id>
		<action>#{itemBean.loadItems}</action>
	</url-mapping>
</pretty-config>
</pre>
<h5>The managed bean that accompanies this mapping:</h5>
<pre lang="java">public class ItemBean
{
	private List<Item> items;
	private Integer currentItemId;
	private String sortByField;
	
	public String deleteItem()
	{
		// currentItemId will be automatically populated by
		// PrettyFaces if the parameter was passed in the request
		// (see example JSF page below)
		ItemManager.deleteById(currentItemId);
		
		// Redisplay the current page via redirect.
		return "pretty:"
	}
	
	public void loadItems()
	{
		// The sortByField member will be null if the sortBy
		// query-parameter is not found in the request
		this.items = ItemManager.getSortedItems(sortByField);
	}
	
	//... getters and setters...
}
</pre>
<h5>Example JSF page: <i>Notice the &lt;f:param&gt; tag.</i></h5>
This will generate a link that provides the 'itemId' parameter to the request for PrettyFaces to parse.

<pre lang="xml">
<c:forEach var="item" items="${itemBean.items}">
	<h:commandLink>
		Delete this item.
		<f:param name="itemId" value="${item.id}" />
	</h:commandLink>
</c:forEach>
</pre>

<h4 style="margin-bottom: 15px;"><a name="navigation"></a><a href="#configuration"><strong>3.3 Wiring navigation into JSF action methods</strong></a></h4>
<pre lang="java">public class PageBean
{
    public String goHome()
    {
        // this will tell pretty to redirect the client to the home-page
        // no parameters are mapped, so this is pretty simple
        return "pretty:home";
    }
    
    public String goHomeAndWelcome()
    {
        // this will tell pretty to redirect the client to the home-page
        // since there is a managed query-parameter defined in the mapping,
        // PrettyFaces will generate the URL, and append the mapped param
        // eg: /home?displayWelcome=true 
        homeBean.displayWelcomeMessage(true);
        return "pretty:home";
    }

    public String goViewStory()
    {
        // this will tell pretty to redirect the client to the viewStory page
        // PrettyFaces will generate the URL by extracting any values from
        // the mapping beans and using them to inject back into the pattern
        // therefore, navigation can be controlled by placing a value into
        // the mapped field before PrettyFaces extracts it and generates the URL
	// so... /story/#{myBean.currentStoryId}/ ...becomes... /story/12/ 

        viewStoryBean.setCurrentStoryId(12);
        return "pretty:viewStory";
    }

    public String doRefreshByRedirect()
    {
        // using the "pretty:" prefix without a mapping-id will cause a
        // redirect to the current page
        return "pretty:";
    }

    public String doNormalJSFRender()
    {
        // returning an value without the "pretty:" prefix will fall back to
        // the default JSF navigation handlers
        return "someNavigationCase";
    }
}
</pre>


<h4 style="margin-bottom: 15px;"><a name="customparsing"></a><a href="#configuration"><strong>3.4 Parsing complex / dynamic-length URLs</strong></a></h4>
Consider the following example configuration and bean: The URL contains many dynamic layers of mysite.com/value/value2/value3/.../valueN, which cannot be specified using a static URL pattern.
<p>
Since patterns are regexes, we can use a catch-all pattern, and process the values ourselves.
<pre lang="xml">
	<url-mapping id="dynamicUrl">
		<pattern> /blog/categories/.* </pattern>
		<view-id> #{urlParsingBean.parseComplexUrl} </view-id>
	</url-mapping>
</pre>
<p>
Example of a complex URL parser. Remember to URLDecode before using any values from the URL:
<pre lang="java">public class UrlParsingBean
{
    public String parseComplexUrl() throws UnsupportedEncodingException
    {
        String uri = PrettyContext.getCurrentInstance().getOriginalUri();
        List<String> categoryChain = new ArrayList<String>();

        while(uri.length() > 0)
        {
            int index = uri.indexOf('/');
            String value = uri.substring(0, index);
            categoryChain.add(URLDecoder.decode(value, "UTF-8"));
            uri = uri.substring(index);
        }
        
        //now load the data...
        
        return "/blag/viewArticle.jsf";
    }
} </pre>

<h4 style="margin-bottom: 15px;"><a name="elaccess"></a><a href="#configuration"><strong>3.5 Accessing PrettyContext through EL</strong></a></h4>
Since a new PrettyContext is generated on each request, and stored into the requestMap, it is possible to access the context object through EL in a JSP, or Facelet.
<p>
<pre lang="xml">

#{prettyContext.currentInstance} <!-- returns the current PrettyContext -->
#{prettyContext.currentInstance.currentMapping.id} <!-- returns the current UrlMapping Id -->
<!-- And so on... -->

</pre>

<h3 style="margin-bottom: 15px;"><a name="links"></a><a	href="#configuration"><strong>4. Rendering HTML Links and URLs</strong></a></h3>
<h4><a name="prettylink"></a>4.1 The pretty:link component</h4>
<p>PrettyFaces provides a JSF component to output an HTML link to the page. The link tag requires a mapping-id (specified in the pretty-config.xml,) identifying which link to render.</p> 
<p>If the provided mappingId requires any url-pattern-parameters or managed-query-parameters, they can be passed in via the &lt;f:param&gt; tag.</p>
<p>Url pattern parameters can be passed individually, as a java.util.List or as an Array. In the latter two cases, toString() will be called on each of the objects in the list/array. If an empty or null list/array is passed, it will be ignored.</p>
<p>Url pattern parameters do NOT have a name attribute, and are parsed in the order they are passed into the tag. Managed-query-parameters DO have a name attribute, and order is irrelevant.</p>
<p><strong>For Example:</strong> The viewComment pattern requires:
<pre lang="xml"><!-- From pretty-config.xml, viewComment mapping-id, above:
 /story/#{myBean.currentStoryId}/#{myBean.commentId}-->
 
<%@ taglib prefix="pretty" uri="http://ocpsoft.com/prettyfaces" %>

<pretty:link mappingId="comment">
	<f:param value="#{myBean.currentStoryId}" />
	<f:param value="#{myBean.commentId}" />
	Go to Comment. (This is Link Text)
</pretty:link>

</pre>
<h4><a name="urlbuffer"></a>4.2 The pretty:urlbuffer component</h4>
<p>PrettyFaces provides a JSF component to generate a URL for use as a page scoped variable through El. This tag requires a mapping-id (specified in the pretty-config.xml)</p>
<p>If the provided mappingId requires any url-pattern-parameters or managed-query-parameters, they can be passed in via the &lt;f:param&gt; tag.</p>
<p>Url pattern parameters can be passed individually, as a java.util.List or as an Array. In the latter two cases, toString() will be called on each of the objects in the list/array. If an empty or null list/array is passed, it will be ignored.</p>
<p>Url pattern parameters do NOT have a name attribute, and are parsed in the order they are passed into the tag. Managed-query-parameters DO have a name attribute, and order is irrelevant.</p>
<p><strong>For Example:</strong> The viewItem pattern requires:
<pre lang="xml"><!-- From the managed-query-parameter section above, itemList mapping-id.-->
<pretty:urlbuffer var="itemListUrl" mappingId="itemList">
	<f:param name="itemId" value="22" />
	<f:param name="sortBy" value="price" />
</pretty:urlbuffer>
<h:outputText value="Generated Url Is: #{requestScope.itemListUrl}" />
<!-- /items/list?itemId=22&sortBy=price -->
<br />
</pre>

This design is intended to reduce complexity and prevent manual manipulation of URLs.

<h3 style="margin-bottom: 15px;"><a name="logging"></a><a href="#configuration"><strong>5. Configuring Logging (log4j)</strong></a></h3>
<h4>example log4j.properties</h4>
<pre lang="config">
### direct log messages to stdout ###
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d{ABSOLUTE} %5p %c{1}:%L - %m%n

### set log levels - for more verbose logging change 'info' to 'debug' ###

log4j.rootLogger=warn, stdout

#this will set PrettyFaces logging level to 'info'
log4j.logger.com.ocpsoft.pretty=info
</pre>

<h3 style="margin-bottom: 15px;"><strong>Finished. Run your application!</strong></h3>
You should now have a fully functional PrettyFaces configuration.

<div style="align: center; background: #555; padding: 10px">
<form action="http://groups.google.com/group/prettyfaces-users/boxsubscribe">
<table border="0" cellspacing="0" cellpadding="0" width="100%">
	<tbody>
		<tr>
			<td colspan='2' align="center"><strong>Subscribe to <a href="http://groups.google.com/group/prettyfaces-users">prettyfaces-users</a></strong></td>
		</tr>
		<tr>
			<td align="right" width="45%"><label for="subeml2" style="color: #eee">Email:&nbsp;</label></td>
			<td align="left"><input id="subeml2" name="email" size="18" type="text" /> <input name="sub" type="submit" value="Subscribe" /></td>
		</tr>
	</tbody>
</table>
</form>
</div>
<br/><br/>