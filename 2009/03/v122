
<wp_sync_categories>['PrettyFaces']</wp_sync_categories>

<wp_sync_dateCreated>20090318T21:39:52</wp_sync_dateCreated>

<wp_sync_description><h1><a name="configuration"></a>Configuration</h1>
Setting up PrettyFaces is simple.</wp_sync_description>

<wp_sync_link>http://ocpsoft.org/prettyfaces/v122/</wp_sync_link>

<wp_sync_mt_allow_comments>1</wp_sync_mt_allow_comments>

<wp_sync_mt_allow_pings>1</wp_sync_mt_allow_pings>

<wp_sync_mt_excerpt></wp_sync_mt_excerpt>

<wp_sync_mt_keywords></wp_sync_mt_keywords>

<wp_sync_mt_text_more>
<ol>
	<li><a href="#filters">Configure PrettyFaces Filters in WEB-INF/web.xml</a><br/><br/></li>
	<li><a href="#prettyconfig">Create the WEB-INF/pretty-config.xml file</a> <br/>(Steps 1 &amp; 2 are required. Advanced features are optional.)<br/><br/></li>
	<li><a href="#application">Advanced Features</a>
		<ul>
			<li><a href="#dynamicviewid">Using dynamic view-ids</a></li>
			<li><a href="#queryparams">Using the managed query-parameter facility</a></li>
			<li><a href="#navigation">Wiring navigation into JSF action methods</a></li>
		</ul>
	</li>
	<li><a href="#links">Components</a>
		<ul>
			<li><a href="#prettylink">&lt;pretty:link&gt;</a></li>
			<li><a href="#urlbuffer">&lt;pretty:urlbuffer&gt;</a></li>
		</ul>
	</li>
</ol>

<h3 style="margin-bottom: 15px;"><a href="#configuration"><strong>0. Extract necessary JAR files into your /WEB-INF/lib directory</strong></a></h3>
This step is pretty straight-forward, right?
<h4>or include a maven dependency in your pom.xml (optional)</h4>
<pre lang="xml">
<dependency>
	<groupId>com.ocpsoft</groupId>
	<artifactId>ocpsoft-pretty-faces</artifactId>
	<version>1.2.2</version>
</dependency>
</pre>

<h3 style="margin-bottom: 15px;"><a name="filters"></a><a href="#configuration"><strong>1. Add the &lt;filter&gt; and &lt;filter-mapping&gt; to /WEB-INF/web.xml</strong></a></h3>
<pre lang="xml"><filter>
	<filter-name>Pretty Filter</filter-name>
	<filter-class>com.ocpsoft.pretty.PrettyFilter</filter-class>
</filter>
<filter-mapping>
	<filter-name>Pretty Filter</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
</pre>

<h3 style="margin-bottom: 15px;"><a name="prettyconfig"></a><a href="#configuration"><strong>2. Create the /WEB-INF/pretty-config.xml file</strong></a></h3>

<pre lang="xml"><pretty-config xmlns="http://ocpsoft.com/prettyfaces-xsd"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://ocpsoft.com/prettyfaces-xsd 
	http://ocpsoft.com/xml/ns/prettyfaces/pretty-1.0.xsd">
	<url-mapping id="login">
		<pattern> /login </pattern>
		<view-id> /faces/login.jsf </view-id>
	</url-mapping>
	<url-mapping id="home">
		<pattern> /home </pattern>
		<query-param name="displayWelcomeMessage">#{homeBean.displayWelcomeMessage}</query-param>
		<view-id> #{homeBean.getViewPath} </view-id>
	</url-mapping>
	<url-mapping id="viewStory">
		<pattern> 
			/story/#{myBean.currentStoryId}/ 
		</pattern>
		<view-id> /faces/story/viewStory.jsf </view-id>
		<action>#{myBean.loadStory}</action>
	</url-mapping>
	<url-mapping id="viewComment">
		<pattern>
			/story/#{myBean.currentStoryId}/#{myBean.commentId}
		</pattern>
		<view-id>/faces/story/comment.jsf</view-id>
		<action>#{myBean.loadComment}</action>
	</url-mapping>
</pretty-config>
</pre>
Each &lt;url-mapping id=""&gt; must specify a unique id. And contains the following attributes and elements, in order:
<ol>
	<li>&lt;pattern&gt;/blog/article/#{someBean.paramName}&lt;/pattern&gt; - Specify the pattern for which this URL will be matched. This element is required, and has a multiplicity of 1 (only one)</li>
	<li>&lt;query-param name="key"&gt;#{someBean.queryParamValue}&lt;/query-param&gt; - Defines a managed query parameter of the form http://site.com/url?<b>key=somevalue</b>, where if the parameter exists, the value will be injected into the specified managed bean. <i>This also handles JSF commandLink and AJAX &lt;f:param&gt; values.</i> This element is optional, and has a multiplicity of 0...N (zero or more)</li>
	<li>&lt;view-id&gt;#{someBean.methodName}&lt;view-id&gt; - Specify the JSF view ID displayed by this mapping, by either calling an el Method (must return an object for which the toString() method will return the view Id) or using a literal value. This element is required, and has a multiplicity of 1 (only one)</li>
	<li>&lt;action&gt;#{someBean.methodName}&lt;/action&gt; - Specify an action method to be called after URL parameters have been parsed and assigned into beans. This element has a multiplicity of 0...N (zero or more)</li>
</ol>
<p style="margin-top: 10px; margin-bottom: 0px;">Order of processing:</p>

<ol>
	<li>URL pattern parsing, query-parameter handling, and value injection into JSF managed beans.</li>
	<li>View-Id calculation (if a view Id is dynamic, the el method will be called.)</li>
	<li>JSF gains control of the request via RequestDispatcher.forward("/context/faces/viewId.jsf").</li>
	<li>Action methods called before RESTORE_VIEW phase, unless the optional phaseId attribute is specified.
Valid values for this attribute are: RESTORE_VIEW, APPLY_REQUEST_VALUES, PROCESS_VALIDATIONS, UPDATE_MODEL_VALUES, INVOKE_APPLICATION, RENDER_RESPONSE, ANY_PHASE.
Note however, that if the phase does not occur, neither will your action method.</li>
</ol>
<h3 style="margin-bottom: 15px;"><a name="application"></a><a href="#configuration"><strong>3. Advanced Features</strong></a></h3>

<h4 style="margin-bottom: 15px;"><a name="dynamicviewid"></a><a href="#configuration"><strong>3.1 Using Dynamic View ID Capabilities</strong></a></h4>
Dynamic view IDs allow a mapped URL to display content from any JSF view. This is prevents doing redirects which would otherwise destroy information stored in the URL, and also provides some extra functionality for application design.
<pre lang="java">public class ManagedBean
{
    public String getViewPath()
    {
        // This method returns the path of the JSF view to display
        // when the URL /home is accessed.
        if(user.isLoggedIn())
        {
        	// Note: the extension '.jsf' is the mapped faces extension
        	return "/faces/home.jsf";
        }
        
        // The home page can instead display a different view; return
        // the pretty:mappingId of the view you wish to display.
        // Note that this will not cause a redirect, and will not 
        // change the client browser URL.
        // If you wish to issue a redirect, you should use a page
        // load action instead of a dynamic view Id function.
        return "pretty:login";
    }
}
</pre>
<h4 style="margin-bottom: 15px;"><a name="queryparams"></a><a href="#configuration"><strong>3.2 Using the Managed Query Parameter facility</strong></a></h4>
Managed query parameters allow automatic assignment of values into JSF managed bean fields, instead of parsing and URL Decoding the value manually out of the request object.
Examining this sample mapping, we can see that the developer has specified two managed query-parameters. The 'sortBy' and 'itemId' parameters.
<pre lang="xml"><pretty-config>
	<url-mapping id="itemList">
		<pattern> /items/list </pattern>
		<query-param name="sortBy">#{itemBean.sortByField}</query-param>
		<query-param name="itemId">#{itemBean.currentItemId}</query-param>
		<view-id> /faces/items/list.jsf </view-id>
		<action>#{itemBean.loadItems}</action>
	</url-mapping>
</pretty-config>
</pre>
<h5>The managed bean that accompanies this mapping:</h5>
<pre lang="java">public class ItemBean
{
	private List<Item> items;
	private Integer currentItemId;
	private String sortByField;
	
	public String deleteItem()
	{
		// currentItemId will be automatically populated by
		// PrettyFaces if the parameter was passed in the request
		// (see example JSF page below)
		ItemManager.deleteById(currentItemId);
		
		// Redisplay the current page via redirect.
		return "pretty:"
	}
	
	public void loadItems()
	{
		// The sortByField member will be null if the sortBy
		// query-parameter is not found in the request
		this.items = ItemManager.getSortedItems(sortByField);
	}
	
	//... getters and setters...
}
</pre>
<h5>Example JSF page: <i>Notice the &lt;f:param&gt; tag.</i></h5> This will generate a link that provides the 'itemId' parameter to the request for PrettyFaces to parse.

<pre lang="xml">
<c:forEach var="item" items="${itemBean.items}">
	<h:commandLink>
		Delete this item.
		<f:param name="itemId" value="${item.id}" />
	</h:commandLink>
</c:forEach>
</pre>

<h4 style="margin-bottom: 15px;"><a name="navigation"></a><a href="#configuration"><strong>3.3 Wiring navigation into JSF action methods</strong></a></h4>
<pre lang="java">public class PageBean
{
    public String goHome()
    {
        // this will tell pretty to redirect the client to the home-page
        // no parameters are mapped, so this is pretty simple
        return "pretty:home";
    }
    
    public String goHomeAndWelcome()
    {
        // this will tell pretty to redirect the client to the home-page
        // since there is a managed query-parameter defined in the mapping,
        // PrettyFaces will generate the URL, and append the mapped param
        // eg: /home?displayWelcome=true 
        homeBean.displayWelcomeMessage(true);
        return "pretty:home";
    }

    public String goViewStory()
    {
        // this will tell pretty to redirect the client to the viewStory page
        // PrettyFaces will generate the URL by extracting any values from
        // the mapping beans and using them to inject back into the pattern
        // therefore, navigation can be controlled by placing a value into
        // the mapped field before PrettyFaces extracts it and generates the URL
	// so... /story/#{myBean.currentStoryId}/ ...becomes... /story/12/ 

        viewStoryBean.setCurrentStoryId(12);
        return "pretty:viewStory";
    }

    public String doRefreshByRedirect()
    {
        // using the "pretty:" prefix without a mapping-id will cause a
        // redirect to the current page
        return "pretty:";
    }

    public String doNormalJSFRender()
    {
        // returning an value without the "pretty:" prefix will fall back to
        // the default JSF navigation handlers
        return "someNavigationCase";
    }
}
</pre>

<h3 style="margin-bottom: 15px;"><a name="links"></a><a href="#configuration"><strong>4. Rendering HTML Links and URLs</strong></a></h3>
<h4><a name="prettylink"></a>4.1 The pretty:link component</h4>
PrettyFaces provides a JSF component to output an HTML link to the page. The link tag requires a mapping-id (specified in the pretty-config.xml,) identifying which link to render.
<p>If the provided mappingId requires any url-pattern-parameters or managed-query-parameters, they can be passed in via the &lt;f:param&gt; tag.
<p>Url pattern parameters do NOT have a name attribute, and are parsed in the order they are passed into the tag. Managed-query-parameters DO have a name attribute, and order is irrelevant.
<p><strong>For Example:</strong> The viewComment pattern requires:
<pre lang="xml"><!-- From pretty-config.xml, viewComment mapping-id, above:
 /story/#{myBean.currentStoryId}/#{myBean.commentId}-->
 
<%@ taglib prefix="pretty" uri="http://ocpsoft.com/prettyfaces" %>

<pretty:link mappingId="comment">
	<f:param value="#{myBean.currentStoryId}"/>
	<f:param value="#{myBean.commentId}"/>
	Go to Comment. (This is Link Text)
</pretty:link>

</pre>
<h4><a name="urlbuffer"></a>4.2 The pretty:urlbuffer component</h4>
PrettyFaces provides a JSF component to generate a URL for use as a page scoped variable through El. This tag requires a mapping-id (specified in the pretty-config.xml)
<p>If the provided mappingId requires any url-pattern-parameters or managed-query-parameters, they can be passed in via the &lt;f:param&gt; tag.
<p>Url pattern parameters do NOT have a name attribute, and are parsed in the order they are passed into the tag. Managed-query-parameters DO have a name attribute, and order is irrelevant.
<p><strong>For Example:</strong> The viewItem pattern requires:
<pre lang="xml"><!-- From the managed-query-parameter section above, itemList mapping-id.-->
<pretty:urlbuffer
	var="itemListUrl"
	mappingId="itemList">
	<f:param name="itemId" value="22" />
	<f:param name="sortBy" value="price" />
</pretty:urlbuffer>
<h:outputText
	value="Generated Url Is: #{requestScope.itemListUrl}" />
<!-- /items/list?itemId=22&sortBy=price -->
<br/>
</pre>

This design is intended to reduce complexity and prevent manual manipulation of URLs.
<h3 style="margin-bottom: 15px;"><strong>Finished. Run your application!</strong></h3>
You should now have a fully functional PrettyFaces configuration.

<div style="align:center; background:#555; padding:10px">
	<form action="http://groups.google.com/group/prettyfaces-users/boxsubscribe">
		<table border="0" cellspacing="0" cellpadding="0" width="100%">
		<tbody>
			<tr>
				<td colspan='2' align="center"><strong>Subscribe to <a href="http://groups.google.com/group/prettyfaces-users">prettyfaces-users</a></strong></td>
			</tr>
			<tr>
				<td align="right" width="30%"><label for="subeml2" style="color:#eee">Email:&nbsp;</label></td><td  align="left"><input id="subeml2" name="email" size="18" type="text" /> <input name="sub" type="submit" value="Subscribe" /></td>
			</tr>
		</tbody>
		</table>
	</form>
</div></wp_sync_mt_text_more>

<wp_sync_permaLink>http://ocpsoft.org/prettyfaces/v122/</wp_sync_permaLink>

<wp_sync_post_status>publish</wp_sync_post_status>

<wp_sync_postid>46</wp_sync_postid>

<wp_sync_title>PrettyFaces v1.2.2 Docs</wp_sync_title>

<wp_sync_userid>3</wp_sync_userid>

<wp_sync_wp_author_display_name>Lincoln Baxter III</wp_sync_wp_author_display_name>

<wp_sync_wp_author_id>3</wp_sync_wp_author_id>

<wp_sync_wp_password></wp_sync_wp_password>

<wp_sync_wp_post_format>standard</wp_sync_wp_post_format>

<wp_sync_wp_slug>v122</wp_sync_wp_slug>