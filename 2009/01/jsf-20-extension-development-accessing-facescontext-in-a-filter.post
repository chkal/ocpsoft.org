.categories ['JSF']
.dateCreated 20090103T10:43:20
.date_modified 20091206T14:42:36
.date_modified_gmt 20091206T19:42:36
.link http://ocpsoft.org/java/jsf-java/jsf-20-extension-development-accessing-facescontext-in-a-filter/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords JSF
.permaLink http://ocpsoft.org/java/jsf-java/jsf-20-extension-development-accessing-facescontext-in-a-filter/
.post_status publish
.postid 37
.title JSF 2.0 Extension Development: Accessing FacesContext in a Filter
.userid 3
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 5201
.wp_slug jsf-20-extension-development-accessing-facescontext-in-a-filter
<h3>The Problem:</h3>
So you need a way to instantiate the 2.0 FacesContext in a Filter, but when you use the same method that you have in the past, you get NullPointerExceptions all over the place when attempting to access any values through El. The ScopedAttributeElResolver bombs when attempting to set values or access methods in backing beans.) It's not too hard to get this working again.
<!--more-->
<h3>The Answer:</h3>
It turns out that it's not much different from how we may have solved this in the past, but our new JSF2.0 ScopedAttributeElResolver expects a ViewRoot object to be set so that we can gain access to the new ViewScope attributes. However... so the first thing we need to do is set a blank UIViewRoot in the FacesContext so that we will not crash when ScopedAttributeElResolver tries to do this:

<pre lang="java">
Map<String,Object> viewMap = facesContext.getViewRoot().getViewMap(false);
</pre>

See our little FacesContextBuilder class here:
<pre lang="java">
import javax.faces.FactoryFinder;
import javax.faces.component.UIViewRoot;
import javax.faces.context.FacesContext;
import javax.faces.context.FacesContextFactory;
import javax.faces.lifecycle.Lifecycle;
import javax.faces.lifecycle.LifecycleFactory;
import javax.servlet.ServletContext;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

public class FacesContextBuilder
{
    public FacesContext getFacesContext(final ServletRequest request, final ServletResponse response)
    {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        if (facesContext != null)
        {
            return facesContext;
        }

        FacesContextFactory contextFactory = (FacesContextFactory) FactoryFinder
                .getFactory(FactoryFinder.FACES_CONTEXT_FACTORY);
        LifecycleFactory lifecycleFactory = (LifecycleFactory) FactoryFinder
                .getFactory(FactoryFinder.LIFECYCLE_FACTORY);
        Lifecycle lifecycle = lifecycleFactory.getLifecycle(LifecycleFactory.DEFAULT_LIFECYCLE);

        ServletContext servletContext = ((HttpServletRequest) request).getSession().getServletContext();
        facesContext = contextFactory.getFacesContext(servletContext, request, response, lifecycle);
        InnerFacesContext.setFacesContextAsCurrentInstance(facesContext);
        if (null == facesContext.getViewRoot())
        {
            facesContext.setViewRoot(new UIViewRoot());
        }

        return facesContext;
    }

    private abstract static class InnerFacesContext extends FacesContext
    {
        protected static void setFacesContextAsCurrentInstance(final FacesContext facesContext)
        {
            FacesContext.setCurrentInstance(facesContext);
        }
    }
}
</pre>

<h3>Just one more thing to worry about:</h3>
Once you hand off your request to the FacesServlet, if you try to do any work in a PhaseListener before the RESTORE_VIEW phase (in the beforePhase() method) you will again experience the null ViewRoot issue, but this time, you cannot set a new UIViewRoot object, so you must wait until the afterPhase() method is called to do your work. ViewRoot will have been initialized by the JSF application at that point.

<h3>Happy Extension Writing!</h3>

