.categories ['JSF', 'Spring']
.dateCreated 20090723T19:23:59
.date_modified 20110605T15:04:02
.date_modified_gmt 20110605T19:04:02
.link http://ocpsoft.org/java/jsf-java/spring-security-what-happens-after-you-log-in/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords JSF, Security, Spring
.permaLink http://ocpsoft.org/java/jsf-java/spring-security-what-happens-after-you-log-in/
.post_status publish
.postid 64
.title Spring Security - What happens after /you/ log in?
.userid 3
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 5203
.wp_slug spring-security-what-happens-after-you-log-in
So you've got Spring Security up and running. Great! Now you've got a login page, and you just added a form on the global page menu to allow users to Login from any public page. There's just one problem. When they log-in from a public page, they’re redirected to the default-login-url! Your users will have to re-navigate to the page they were already viewing when they logged in, or maybe they'll just use the much dreaded "Back" button. That's not a good interaction, but we have a solution.
<!--more-->
<strong>UPDATE:</strong> There is a simpler, but less complete solution built in. (<a href="http://forum.springsource.org/showthread.php?t=65123">See here</a>.) This means appending "?spring-security-redirect=/your/target/url" to your redirect to the Spring Security Filter chain.

If you have not already completed <a href=http://ocpsoft.com/java/acegi-spring-security-jsf-login-page/ id=ornu title="integrating Spring Security and JSF">integrating Spring Security and JSF</a>, please consider it, as this article depends on having a working JSF login page and managed bean. 
  
<strong>Note:</strong> This approach will not work if you are invalidating/re-creating the session after a successful authentication (see <a target="_blank" href="http://static.springsource.org/spring-security/site/docs/3.0.x/reference/ns-config.html#ns-session-fixation">Session Fixation attacks</a>). Supporting session invalidation would take some extra work that will not be in the scope of this article. <p/>
<h2>The login form</h2>
Here is a basic JSF/Spring Security login form. It would be nice if we could enable or disable the redirect functionality, so we’ll add a hidden form field that is only rendered on demand (here we use Facelets <a target="_blank" href="https://javaserverfaces.dev.java.net/nonav/docs/2.0/pdldocs/facelets/ui/param.html">ui:param</a> functionality for our on-off switch.) 
  
<pre lang="xml"><h:form prependId="false">
    <c:if test="#{redirect == 'true'}">
        <input type="hidden" name="redirect" value="true" />
    </c:if>
    
    <label for="j_username"><h:outputText value="Username:" /><ocp:message
        for="j_username" /><br />
    </label>
    <h:inputText id="j_username" value="#{loginBean.username}"
        required="true" />

    <br />
    <br />
    <label for="j_password"><h:outputText value="Password:" /><ocp:message
        for="j_password" /><br />
    </label>
    <h:inputSecret id="j_password" value="#{loginBean.password}"
        required="true" />

    <br />
    <br />
    <label for="_spring_security_remember_me"><h:outputText
        value="Remember me" /> </label>
    <h:selectBooleanCheckbox id="_spring_security_remember_me"
        value="#{loginBean.rememberMe}" />
    <br />

    <h:commandButton type="submit" id="login"
        action="#{loginBean.doLogin}" value="Login" />

    <h:commandButton type="submit" styleClass="faded" id="cancel"
        action="#{loginBean.doCancel}" value="Cancel" immediate="true" />
    <br />
    <br />
</h:form> 
</pre>
<p/>

<div class="featured"><center>Need some <strong>/pretty /urls</strong> in your JSF web-app? Try <a href="http://ocpsoft.com/prettyfaces/" title="SEO | Dynamic Parameters | Bookmarks | Navigation | JSF | JSF2 | URLRewrite Filter | Open Source">PrettyFaces</a>: URL-rewriting for Java EE and JSF. (Free and <strong>open-source</strong>!)</center></div>

<h2>The login action method</h2>
First, check to make sure that we actually want to do a redirect after login. Do this by testing for the existence of our hidden form parameter. 
 
Find the full LoginBean code <a target="_blank" href="http://ocpsoft.com/java/acegi-spring-security-jsf-login-page/">here</a>.

<pre lang="java"> 
public String doLogin() throws IOException, ServletException
{
    String redirect = FacesUtils.getRequestParameter("redirect");
    if ((redirect != null) && !redirect.isEmpty())
    {
        redirect = PrettyContext.getCurrentInstance().getOriginalRequestUrl();
        Map<String, Object> sessionMap = FacesContext.getCurrentInstance().getExternalContext().getSessionMap();
        sessionMap.put(LoginRedirectFilter.LAST_URL_REDIRECT_KEY, redirect);
    }
    FacesUtils.getExternalContext().dispatch("/j_spring_security_check");
    FacesUtils.getFacesContext().responseComplete();
    return null;
} 
</pre> 
  
Before forwarding to the Spring Security /j_security_login_check intercepting filter chain, we’ll need to set the current URL into a Session attribute: “LoginRedirectFilter.LAST_URL_REDIRECT_KEY”. 
  
This will be used in our custom filter after the user successfully authenticates with Spring Security. 
<p/>
<h2>The login filter </h2>
Here is where we’ll check for the existence of our session attribute: “LAST_URL_REDIRECT_KEY”. If this key contains a value, then we should redirect the user to that URL. If the key does not contain a value, then we should not perform any redirect, and continue as normal. 
  
One other concern is: what if authentication failed? Let's assume that Spring Security will redirect the user to the Login Page if they send invalid credentials. We don't want to trigger a redirect as they try to access the login page, so we also check to make sure we have a successfully authenticated user before redirecting. 
  
<pre lang="java">
import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;

@Component
public class LoginRedirectFilter implements Filter
{
    public static final String LAST_URL_REDIRECT_KEY = LoginRedirectFilter.class.getName() + "LAST_URL_REDIRECT_KEY";

    @Override
    public void destroy()
    {}

    @Override
    public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain)
            throws IOException, ServletException
    {
        HttpSession session = ((HttpServletRequest) request).getSession();
        String redirectUrl = (String) session.getAttribute(LAST_URL_REDIRECT_KEY);
        if (isAuthenticated() && (redirectUrl != null) && !redirectUrl.isEmpty())
        {
            session.removeAttribute(LAST_URL_REDIRECT_KEY);
            HttpServletResponse resp = (HttpServletResponse) response;
            resp.sendRedirect(redirectUrl);
        }
        else
        {
            chain.doFilter(request, response);
        }
    }

    private boolean isAuthenticated()
    {
        boolean result = false;
        SecurityContext context = SecurityContextHolder.getContext();
        if (context instanceof SecurityContext)
        {
            Authentication authentication = context.getAuthentication();
            if (authentication instanceof AnonymousAuthenticationToken)
            {
                // not authenticated
            }
            else if (authentication instanceof Authentication)
            {
                result = true;
            }
        }
        return result;
    }

    @Override
    public void init(final FilterConfig filterConfig) throws ServletException
    {}
}
</pre>
  <p/>
<h2>Web.xml</h2>
Some specific configuration is required to ensure the proper ordering of our filters. LoginRedirectFilter's filter-mapping must be placed after any Spring Security filters - otherwise we will redirect too soon, and authentication will never occur. You probably want to place it before any filters that apply business logic. 

<pre lang="xml">
<filter>
    <filter-name>loginRedirectFilter</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>
<filter-mapping>
    <filter-name>loginRedirectFilter</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping> 
</pre>
<p/>
<p/>

<table>
<tr>
<td>
<h2>Putting it all together</h2>
This sequence diagram describes the entire process, including what Spring Security will be doing after intercepting the /j_security_check forwarded from LoginBean: 
You should now have a functional LoginRedirectFilter configured in tandem with Spring Security.
<p/></td>
<td><center><a target="_blank" href='http://ocpsoft.com/wp-content/uploads/2009/07/sequence.png'><img src="http://ocpsoft.com/wp-content/uploads/2009/07/sequence-300x212.png" alt="Sequence Diagram for LoginRedirectFilter Flow" title="LoginRedirectFilter Sequence" width="300" height="212" class="alignnone size-medium wp-image-65" /></a></center></td>
</tr>
</table>

<p/>

<table>
<tr>
<td width="300px">[amazon codes="1935182358,1430224991"]</td>
<td><h3>Want more info?</h3>
Try one of these highly-recommended books, written by Spring Developers and Spring Experts:<br/></td>
</tr>
</table>

[slideout handle="Need more info?" header="Try one of these highly-recommended books:"]
   [amazon codes="1935182358,1430224991" bgcolor="dddddd"]
[/slideout]