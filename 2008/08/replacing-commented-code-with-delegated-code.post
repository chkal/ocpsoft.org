.categories ['Best Practices', 'Java']
.dateCreated 20080801T17:49:26
.date_modified 20091206T14:44:56
.date_modified_gmt 20091206T19:44:56
.link http://ocpsoft.org/java/replacing-commented-code-with-delegated-code/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords Java
.permaLink http://ocpsoft.org/java/replacing-commented-code-with-delegated-code/
.post_status publish
.postid 6
.title Replacing Commented Code with Delegated Code
.userid 3
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 
.wp_slug replacing-commented-code-with-delegated-code
Today's subject is a well commented square root approximation method. Imagine that this method is buried deep in a very messy Java class. How can we make sure that this code is reusable and that our comments don't become out of date as our code changes?
<pre lang="java">/**
 * Approximate the square root of n, to within the specified tolerance,
 * using the Newton-Raphson method. This method takes two arguments:
 * @param Double n The number to be square-rooted
 * @param Double tolerance the error tolerance
 * @return Double result of square root operation
 */
public Double approximateSquareRoot(Double n, Double tolerance)
{
    Double root = n / 2;
    while (Math.abs(root - (n / root)) > tolerance)
    {
        root = 0.5 * (root + (n / root));
    }
    return root;
}</pre>
<!--more-->
Itâ€™s my philosophy that if you find yourself writing a comment that describes what a method does, either the method does too much, or you should use that comment AS the name of the method. Try something like this:
<pre lang="java">public Double newtonRaphsonSqRoot( Double number, Double tolerance )</pre>
<h3>Method Delegation:</h3>
If you need to conform to a standard interface, then delegate! <a href="http://http://en.wikipedia.org/wiki/Delegation_%28programming%29" target="_blank">Delegation</a> is your best friend.
<pre lang="java">public Double approxSquareRoot( Double number )
{
     return newtonRaphsonSqRootApprox( number, 0.0001 )
}</pre>
Also... if you don't want to add a private delegated method, then consider abstracting that behavior into an Operation class that performs the square root.
<h3>Object Delegation:</h3>
This strategy even lets you change behavior of your square root operations at runtime, at configuration time, and it lets you extend the behavior to use other algorithms without changing your client code. Just make sure that you only expose your interface, because as soon as your clients know about the implementing class, you defeated the purpose of delegating in the first place.
<pre lang="java">public interface SquareRoot
{
     public Double perform(Double input);
}

/**
 * Approximate the square root of n, to within the specified tolerance,
 * using the Newton-Raphson method.
 */
public class NewtonRaphsonApproximation implements SquareRoot
{
    private Double tolerance = 0.001;

    public Double perform( Double input )
    {
        Double root = n / 2;
        while (Math.abs(root - (n / root)) > tolerance)
        {
            root = 0.5 * (root + (n / root));
        }
        return root;
    }
}</pre>
See, we can even throw in a brief comment where it makes sense to store it.
<h3>The Factory:</h3>
Look! Now if you want to change the algorithm that calculates your square roots, all you have to do is create a new class that implements SquareRoot, and configure a <a href="http://en.wikipedia.org/wiki/Factory_method_pattern" target="_blank">Factory</a> to provide you with an instance of that class. The possibilities are limitless, really. You can select which type of square root you want to use via a configuration file, dynamic logic, anything:
<pre lang="java">//where OperationFactory decides which type of SquareRoot to provide.

SquareRoot squareRoot = OperationFactory.getSquareRoot();
Double result = squareRoot.perform( 123.2 );</pre>
Now it doesn't matter that we are using <a href="http://en.wikipedia.org/wiki/Newton%27s_method" target="_blank">NewtonRaphson</a> or <a href="http://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Taylor_series" target="_blank">TaylorApproximation</a> implementations of SquareRoot. And you still have clear understandable code under the covers.
<h3>Final Thoughts:</h3>
There are some who will say in response to this article, "you now have extra classes and methods that are making your code harder to understand," and I say to them:

<em>It all depends on the problem you are solving.</em>

If you are using the newtonRaphsonSquareRoot() method in one place in your entire program, then you might be OK to leave it the way it is, sure. But as soon as you start using that method in other places, you might want to consider making a class to contain it anyway. Don't just copy and paste your code. Cut and paste in a new class!

The next phase, the Factory, would come when you start using different types of SquareRoot approximations. Factories help hide the details of creation and implementation from the client. Hiding implementation is almost always good.

My article is a response to: <a href="http://blog.uncommons.org/2008/07/25/no-your-code-is-not-so-great-that-it-doesnt-need-comments/" target="_blank">this blog</a>. Comment away, so to speak.