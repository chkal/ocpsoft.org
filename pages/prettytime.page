.categories ['Uncategorized']
.dateCreated 20090616T18:22:18
.excerpt 
.link http://ocpsoft.org/prettytime/
.mt_allow_comments 1
.mt_allow_pings 1
.page_id 60
.page_status publish
.permaLink http://ocpsoft.org/prettytime/
.text_more 
.title PrettyTime
.userid 3
.wp_author Lincoln Baxter III
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_page_order 3
.wp_page_parent_id 0
.wp_page_parent_title 
.wp_page_template page-notitle.php
.wp_password 
.wp_slug prettytime
[toc][/toc]

<center><img src="http://ocpsoft.org/wp-content/uploads/2012/04/prettytime-center-compressed.png" alt="" title="prettytime-center-compressed" width="378" height="92" class="alignnone size-full wp-image-4461" />

<h2 style="margin-bottom: 35px; margin-top: 15px;">Convert Java <font color=green>Date()</font> objects in just "<font color=green>a few minutes</font>!"</h2></center>

<div class=featured><p>PrettyTime is an OpenSource time formatting library. Completely customizable, it creates human readable, relative timestamps like those seen on Digg, Twitter, and Facebook. Get started "right now!" and in over <a href="#i18n">25 languages</a>!</p></div>

<h2 style="font-size: 1.5em; margin-bottom: 25px;"><span class="toc">Get Started</span>, see how simple social date-formatting can be (2 steps) </h2>

[info]Follow <a href="http://twitter.com/ocpsoft">@ocpsoft</a> and <a href="http://twitter.com/lincolnthree">@lincolnthree</a> on Twitter.[/info]


<br/>


<center>
<p style="margin: 20px;">Come join us on in <code>#ocpsoft</code> - <a href="http://webchat.freenode.net/?channels=%23ocpsoft" title="OCPsoft channel on Freenode IRC" target="_blank">our channel on irc.freenode.net.</a> Additionally, you are welcome to attend the dev meeting, every [[Calendar|Monday at 1pm EST]]. Also, please join the discussion on our <a href="mailto:prettyfaces-dev@googlegroups.com">dev email list</a>.</p>
</center>

[section]


<h2 class="toc">1. Include PrettyTime in your Project</h2>

[snippit filename="Add PrettyTime to your maven pom.xml" href="http://repo1.maven.org/maven2/org/ocpsoft/prettytime/prettytime/" label="Or download the JAR"]
<dependency>
   <groupId>org.ocpsoft.prettytime</groupId>
   <artifactId>prettytime</artifactId>
   <version>2.0.0.Final</version>
</dependency>

<!-- To use snapshots, you must also use the Sonatype Snapshots respository -->
<repository>
   <id>sonatype-snapshots</id>
   <url>https://oss.sonatype.org/content/repositories/snapshots/</url>
</repository>
[/snippit]


<h2 class="toc">2. Format some timestamps!</h2>

<p>PrettyTime, by default, uses the current system time as the point of reference (reference time) for calculating the elapsed, or remaining time to the Date argument.</p>

[snippit filename="BasicJavaApp.java"]
import java.util.Date;
import org.ocpsoft.pretty.time.PrettyTime;

public class BasicJavaApp
{
	public static void main(String[] args) 
	{
		PrettyTime p = new PrettyTime();
		System.out.println(p.format(new Date()));
		//prints: “right now”

		System.out.println(p.format(new Date(1000*60*10)));
		//prints: “10 minutes from now”
	}
}
[/snippit]

<h4>See below for more <a href="#examples">examples</a> using JUnit.</h4>

<p/><br/>

<h2 class="toc">3. Use extensions for other frameworks.</h2>

<p>
<ul>

<li><strong>Groovy on Grails</strong> - Visit <a href="http://grails.org/plugin/pretty-time" target="_blank">plugin</a> website.<br/></br></li>
<li><strong>JavaServer Faces</strong> - PrettyTime comes with an extension for JavaServer Faces so that Date objects can be displayed using the standard JSF Converter system.
<br/><p>First, you must include the JSF integration module.</p> 
[code]
<dependency>
   <groupId>org.ocpsoft.prettytime</groupId>
   <artifactId>prettytime-integration-jsf</artifactId>
</dependency>[/code]
</li>
<p>
Then you may attach PrettyTimeConverter to your JSF Date and timestamp outputs:

[snippit filename="example.xhtml"]
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:f="http://java.sun.com/jsf/core"      
      xmlns:h="http://java.sun.com/jsf/html">
 
    <h:head>
        <title>PrettyTime Example</title>
    </h:head>
    <h:body>
        <h3>Let's format some timestamps!</h3>
        <h:outputText value="#{timeBean.time}" converter="prettyTimeConverter"/>
    </h:body>
</html>
[/snippit]

<p>Or you can also use the converter tag for additional control.</p>

[code]
<h:outputText value="#{exampleBean.futureDate}">
	<f:converter converterId="org.ocpsoft.PrettyTimeConverter"/>
</h:outputText>
[/code]
</p>

</ul>
</p>

(Get involved! <a href="https://github.com/ocpsoft/prettytime">Fork us on GitHub</a> and integrate with other frameworks! Feel free to send pull requests with enhancements and bug-fixes.)

[section]

<h2 class="toc">i18n and multiple-languages support</h2><a name="i18n"></a>

<p>PrettyTime now supports internationalization via resource bundles. Simply place an appropriate Resources_**.properties bundle on the classpath: <b>org.ocpsoft.pretty.time.i18n</b>, then set the desired Locale into your PrettyTime object. <span class="faded">(contributed by Thomas Weitzel)</span></p>

<h4>Locales with built-in support:</h4>
<ul>
	<li>Arabic - AR: <span class="faded">Muhammad Sabry Ali</span></li>
	<li>Bulgarian - BG: <span class="faded">Марио Георгиев</span></li>
	<li>Catalan - ca_ES: <span class="faded"><a href="https://github.com/mathpere" target="_blank">Mathieu</a></span></li>
	<li>Chinese - ZH_CN: <span class="faded"">陈正华</span></li>
	<li>Croatian - Miroslav Rešetar</li>
	<li>Dutch - NL: <span class="faded">Bram Van Dam</span></li>
	<li>English - DEFAULT</li>
	<li>Estonian - Matti Jagula</li>
	<li>French - FR: <span class="faded">Eric Palpacuer</span></li>
	<li>German - DE: <span class="faded">Thomas Weitzel</span></li>
	<li>Hungarian - Balázs Németh</li>
	<li>Indonesian - in_ID <a href="https://github.com/xsalefter">xsalefter</a></li>
	<li>Italian - IT: <span class="faded">Mirco Attocchi</span></li>
	<li>Korean - KO: <span class="faded"><a href="https://github.com/pigmon93" target="_blank">Seungbeom</a></span></li>
	<li>Norwegian - Magnus Byrkjeflot - <a href="http://www.mylog.no">www.mylog.no</a></li>
	<li>Polish - Upender Gilakathula</li>
	<li>Portugese - PT: <span class="faded">Gustavo Ehrhardt</span></li>
	<li>Romanian - Upender Gilakathula</li>
	<li>Spanish - ES: <span class="faded">Bruno Resano</span></li>
	<li>Slovenian- SL: <span class="faded">Uros Majeric</span></li>
	<li>Turkish - Halil</li>
	<li>Vientamese - Xuân Tính - <a href="http://www.tinhtruong.info/2010/06/vietnamese-resource-bundle-for.html">Blog</a></li>
</ul>

[snippit filename="Basic_i18n.java"]
import java.util.Date;
import java.util.Locale;

import org.ocpsoft.pretty.time.PrettyTime;

public class Basic_i18n
{
    public static void main(final String[] args)
    {
        PrettyTime p = new PrettyTime(new Locale("de"));
        System.out.println(p.format(new Date()));
    }
}
[/snippit]




<h2 class="toc">Creating a custom ResourceBundle</h2>

[info]Please read the <a href="http://ocpsoft.org/prettytime/translate-for-your-language/" title="Translate for your Language">translation guide</a>. Additionally, you can find full examples of resource bundles packaged inside pretty-time.jar. If you create a new Locale resource bundle for PrettyTime, please <a href="https://github.com/ocpsoft/prettytime" title="Fork PrettyTime on GitHub" target="_blank">fork the project</a>, and submit a pull request with the bundle and a test case.[/info]

[snippit filename="org/ocpsoft/pretty/time/i18n/Resources_de.java"]
package org.ocpsoft.pretty.time.i18n;

import java.util.ListResourceBundle;

public class Resources_de extends ListResourceBundle
{
    private static final Object[][] CONTENTS = new Object[][] {
                                  { "CenturyPattern", "%n %u" },
                                  { "CenturyFuturePrefix", "In " },
                                  { "CenturyFutureSuffix", "" },
                                  { "CenturyPastPrefix", "Vor " },
                                  { "CenturyPastSuffix", "" },
                                  { "CenturyName", "Jahrhundert" },
                                  { "CenturyPluralName", "Jahrhunderten" }
                                  //...
                                  };
    }

    @Override
    protected Object[][] getContents()
    {
        return CONTENTS;
    }
}
[/snippit]
<p/><br/>





<h2 class="toc">Creating a custom TimeUnit:</h2><a name="customunit"></a>

<p><code>TimeUnits</code> are the units of measure in PrettyTime. They can be as long or as short as desired, and can be formatted into any necessary pattern. All that needs to be done is to implement the <code>TimeUnit</code> interface, and provide a default <code>TimeFormat</code></p>

[snippit filename="Month.java"]
package org.ocpsoft.pretty.time.units;

import org.ocpsoft.pretty.time.BasicTimeFormat;
import org.ocpsoft.pretty.time.TimeFormat;
import org.ocpsoft.pretty.time.TimeUnit;

public class Month implements TimeUnit
{
    private static final TimeFormat defaultFormat = new BasicTimeFormat().setPattern("%n %u").setPastSuffix(" ago")
            .setFutureSuffix(" from now");

    private TimeFormat format = defaultFormat;
    private long maxQuantity = 0;
    private final long millisPerUnit = 2629743830L;
    private String name = "month";
    private String pluralName = "months";
    
    /* getters and setters */
}
[/snippit]

<p><code>TimeFormat</code> is also simple -- and is the core of the Formatting platform.</p>

[snippit filename="TimeFormat.java"]
package org.ocpsoft.pretty.time;

public interface TimeFormat
{
    /**
     * Given a populated Duration object. Apply formatting and output the
     * result.
     */
    public abstract String format(final Duration duration);
}
[/snippit]

<p>See BasicTimeFormat for an implementation example using regular expressions</p>
<br/>

<h2 class="toc">Examples using JUnit:</h3><a name="examples"></a>

<p>See below for creating custom time units and formats:</p>

[snippit filename="PrettyTimeTest.java" label="View complete file" href="https://github.com/ocpsoft/prettytime/blob/master/src/test/java/org/ocpsoft/pretty/time/PrettyTimeTest.java"]
package org.ocpsoft.pretty.time;

import static org.junit.Assert.*;

import java.text.SimpleDateFormat;
import java.util.*;
import org.junit.*;
import org.ocpsoft.pretty.time.*;

public class PrettyTimeTest
{

   @Test
   public void testRightNow() throws Exception
   {
      PrettyTime t = new PrettyTime();
      assertEquals("moments from now", t.format(new Date()));
   }

   @Test
   public void testMinutesFromNow() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(0));
      assertEquals("12 minutes from now", t.format(new Date(1000 * 60 * 12)));
   }

   @Test
   public void testHoursFromNow() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(0));
      assertEquals("3 hours from now", t.format(new Date(1000 * 60 * 60 * 3)));
   }

   @Test
   public void testDaysFromNow() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(0));
      assertEquals("3 days from now", t.format(new Date(1000 * 60 * 60 * 24 * 3)));
   }

   @Test
   public void testWeeksFromNow() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(0));
      assertEquals("3 weeks from now", t.format(new Date(1000 * 60 * 60 * 24 * 7 * 3)));
   }

   @Test
   public void testMonthsFromNow() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(0));
      assertEquals("3 months from now", t.format(new Date(2629743830L * 3L)));
   }

   // ... and so on

   /*
    * Past
    */
   @Test
   public void testMomentsAgo() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(6000));
      assertEquals("moments ago", t.format(new Date(0)));
   }

   @Test
   public void testMinutesAgo() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(1000 * 60 * 12));
      assertEquals("12 minutes ago", t.format(new Date(0)));
   }

   @Test
   public void testCenturiesAgo() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(3155692597470L * 3L));
      assertEquals("3 centuries ago", t.format(new Date(0)));
   }

   // ...


   /*
    * Format duration lists
    */
   @Test
   public void testFormattingDurationListInThePast() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(1000 * 60 * 60 * 24 * 3 + 1000 * 60 * 60 * 15 + 1000 * 60 * 38));
      List<Duration> durations = t.calculatePreciseDuration(new Date(0));
      assertEquals("3 days 15 hours 38 minutes ago", t.format(durations));
   }

   @Test
   public void testFormattingDurationListInTheFuture() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(0));
      List<Duration> durations = t.calculatePreciseDuration(new Date(1000 * 60 * 60 * 24 * 3 + 1000 * 60 * 60 * 15
               + 1000 * 60 * 38));
      assertEquals("3 days 15 hours 38 minutes from now", t.format(durations));
   }

   @Test
   public void testSetLocale() throws Exception
   {
      PrettyTime t = new PrettyTime(new Date(315569259747L * 3L));
      assertEquals("3 decades ago", t.format(new Date(0)));
      t.setLocale(Locale.GERMAN);
      assertEquals("vor 3 Jahrzehnten", t.format(new Date(0)));
   }

   SimpleDateFormat format = new SimpleDateFormat("MM/dd/yyyy");

   // Stores current locale so that it can be restored
   private Locale locale;

   // Method setUp() is called automatically before every test method
   @Before
   public void setUp() throws Exception
   {
      locale = Locale.getDefault();
      Locale.setDefault(Locale.ROOT);
   }

   // Method tearDown() is called automatically after every test method
   @After
   public void tearDown() throws Exception
   {
      Locale.setDefault(locale);
   }

}

[/snippit]
<br/>

<a name="getinvolved"></a>
<div class="featured">
<p style="margin-top: 10px; margin-bottom: 0px;">
<h2 style="margin-top: 0px;" class="toc">Get involved</h2>
<strong>Source</strong>: <a href="https://github.com/ocpsoft/prettytime">https://github.com/ocpsoft/prettytime</a><br/>
<strong>Forums</strong>: <a href="http://ocpsoft.org/support/prettytime-users/">http://ocpsoft.org/support/forum/prettytime-users/</a><br/>
<strong>Get updates</strong>: <a href="http://ocpsoft.org/subscribe/">http://ocpsoft.org/subscribe/</a><br/>
</p><p>
Having trouble? Have an idea? <a href="https://github.com/ocpsoft/prettytime/issues" title="Report an issue">Report an issue.</a> </p>
</div>