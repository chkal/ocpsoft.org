.categories []
.dateCreated 20120918T13:58:20
.excerpt 
.link http://ocpsoft.org/tutorials/regular-expressions/password-regular-expression/
.mt_allow_comments 1
.mt_allow_pings 0
.page_id 4960
.page_status publish
.permaLink http://ocpsoft.org/tutorials/regular-expressions/password-regular-expression/
.text_more 
.title Password Regular Expression
.userid 3
.wp_author Lincoln Baxter III
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_page_order 2
.wp_page_parent_id 4913
.wp_page_parent_title Regular Expressions
.wp_page_template default
.wp_password 
.wp_slug password-regular-expression
[toc/]

<img src="http://ocpsoft.org/wp-content/uploads/2012/09/IMG_20120918_002559-300x212.jpg" alt="" title="IMG_20120918_002559" width="300" height="212" class="pull-right" style="margin-left: 15px; margin-bottom: 15px;" />

<p>Password constraints can be one of the most complicated applications we can perform using regular expressions, but fortunately, we have some experience to make our task easier.

<h4>Assume we would like our password to contain all of the following, but in no particular order:</h4>
<p><ol>
	<li>At least one digit <code>[0-9]</code></li>
	<li>At least one lowercase character <code>[a-z]</code></li>
	<li>At least one uppercase character <code>[A-Z]</code></li>
	<li>At least one special character <code>[*.!@#$%^&(){}[]:;<>,.?/~_+-=|\]</code></li>
	<li>At least 8 characters in length, but no more than 32.</li>
</ol></p>

<p>To solve this, we turn to our friends, the <a href="http://ocpsoft.org/opensource/guide-to-regular-expressions-in-java-part-2/#section-1" title="Guide to Regular Expressions in Java (Part 2)">look-ahead</a>, which when combined with <a href="http://ocpsoft.org/tutorials/regular-expressions/and-in-regex/" title="“And” in regular expressions `&&`">logical and in regex</a>, allows us to achieve the desired result. We have a regular expression that enforces all of the above constraints, but allows us to satisfy them in any order, whether or not the digits, letters, or special characters come first, last, or anywhere:</p>

<h3 class="toc">The pattern:</h3>
<pre lang="perl">^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\]).{8,32}$</pre>

<h4 class="toc">Dissecting the pattern</h4>
<pre lang="perl">
^                                            Match the beginning of the string
(?=.*[0-9])                                  Require that at least one digit appear anywhere in the string
(?=.*[a-z])                                  Require that at least one lowercase letter appear anywhere in the string
(?=.*[A-Z])                                  Require that at least one uppercase letter appear anywhere in the string
(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\])    Require that at least one special character appear anywhere in the string
.{8,32}                                      The password must be at least 8 characters long, but no more than 32
$                                            Match the end of the string.
</pre>

<p><h2 class="toc">Enforcing several of many constraints</h2>
Let's now consider the situation where we want to enforce 3 out of 4 of our character constraints on each password. We can still achieve this with regular expressions, but as you can see, things quickly get confusing.</p>

<h3 class="toc">The enhanced pattern:</h3>
<pre lang="perl">^(?:(?:(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z]))|(?:(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\]))|(?:(?=.*[0-9])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\]))|(?:(?=.*[0-9])(?=.*[a-z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\]))).{8,32}$</pre>

<p>Here we have used non-capturing groups <code>(?: ...)</code>, combined with alternation <code>|</code> to ensure that at least one set of three out of four constraints is met; however, this means a good deal of duplication without our pattern. Thus a more manageable solution would be to implement such a check using the higher programming language of your choice, or in this case, Java:</p>

<h2 class="toc">Solution via a higher language</h2>
[snippit filename="A highly-readable password check in Java"]
/**
 * Ensure that we have at least three out of four password criteria met. 
 * This would far more complicated to achieve using standard regular expressions.
 */
public boolean passwordValidates( String pass ) {
   int count = 0;

   if( pass.matches(".*\\d.*") )
      count ++;
   if( pass.matches(".*[a-z].*") )
      count ++;
   if( pass.matches(".*[A-Z].*") )
      count ++;
   if( pass.matches(".*[*.!@#$%^&(){}[]:";'<>,.?/~`_+-=|\\].*") )
      count ++;

   return count >= 3;
}
[/snippit]