.categories ['OpenSource']
.dateCreated 20100204T23:35:29
.link http://ocpsoft.org/opensource/how-to-safely-add-modify-servlet-request-parameter-values/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords 
.permaLink http://ocpsoft.org/opensource/how-to-safely-add-modify-servlet-request-parameter-values/
.post_status publish
.postid 1049
.title Safely add / modify Servlet request parameter values
.userid 3
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_password 
.wp_post_format standard
.wp_slug how-to-safely-add-modify-servlet-request-parameter-values
<h1 style="display:none;"><a href="http://ocpsoft.com/prettyfaces/"  title="SEO | Dynamic Parameters | Bookmarks | and Navigation for JSF | JSF2">PrettyFaces</a></h1>
<h2>Sometimes things are worth writing about.</h2>
While working on the <a href="http://ocpsoft.com/prettyfaces/"  title="SEO | Dynamic Parameters | Bookmarks | and Navigation for JSF | JSF2">PrettyFaces</a>: bookmarking, and SEO extensions for JSF / JSF2, I came across a need to modify the current request parameters in order to "trick" the system into thinking that additional query parameters had been supplied.

<h3>Naively, I tried:</h3>
<pre lang="java">
    request.getParameterMap().put("name", new String[]{"value1", "value2"});
</pre>
But that doesn't work, because you aren't allowed to modify request parameter values once the request has begun processing:
<pre lang="text">
    java.lang.IllegalStateException: Cannot find message associated with key parameterMap.locked
	at org.apache.catalina.util.ParameterMap.put(ParameterMap.java:213)
</pre>
<!--more-->
This means we need to wrap the current request with our own special <code>HttpServletRequestWrapper</code> that will provide the ability to merge in some extra parameters up front. 
<h3>The magic is quite simple:</h3>
But be careful! If you call <code>request.getParameterMap()</code> or any method that would call <code>request.getReader()</code> and begin reading, you will prevent any further calls to <code>request.setCharacterEncoding(...)</code>, which is a big deal if you are processing i18n requests, or requests with a special content type.

You need to ensure that the new parameters are merged with the original request parameters only when the parameters are requested, so that everyone still has a chance to set the encoding. Otherwise you get nasty warnings like this:

<pre lang="text">
WARNING: PWC4011: Unable to set request character encoding to UTF-8 from context 
/ocpsoft-pretty-faces-tests, because request parameters have already been read, or 
ServletRequest.getReader() has already been called
</pre>

<h3>Our little HttpServletRequestWrapper:</h3>
You could simply provide a modifiable map implementation, but that would break the contract of the request parameter map.

So using a bit of lazy processing, here's how we avoid reading the parameters until they are actually requested, while still maintaining the immutable nature of the Map.
<pre lang="java">
import java.util.Collections;
import java.util.Enumeration;
import java.util.Map;
import java.util.TreeMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletRequestWrapper;

public class PrettyFacesWrappedRequest extends HttpServletRequestWrapper
{
    private final Map<String, String[]> modifiableParameters;
    private Map<String, String[]> allParameters = null;

    /**
     * Create a new request wrapper that will merge additional parameters into
     * the request object without prematurely reading parameters from the
     * original request.
     * 
     * @param request
     * @param additionalParams
     */
    public PrettyFacesWrappedRequest(final HttpServletRequest request, 
                                                    final Map<String, String[]> additionalParams)
    {
        super(request);
        modifiableParameters = new TreeMap<String, String[]>();
        modifiableParameters.putAll(additionalParams);
    }

    @Override
    public String getParameter(final String name)
    {
        String[] strings = getParameterMap().get(name);
        if (strings != null)
        {
            return strings[0];
        }
        return null;
    }

    @Override
    public Map<String, String[]> getParameterMap()
    {
        if (allParameters == null)
        {
            allParameters = new TreeMap<String, String[]>();
            allParameters.putAll(super.getParameterMap());
            allParameters.putAll(modifiableParameters);
        }
        //Return an unmodifiable collection because we need to uphold the interface contract.
        return Collections.unmodifiableMap(allParameters);
    }

    @Override
    public Enumeration<String> getParameterNames()
    {
        return Collections.enumeration(getParameterMap().keySet());
    }

    @Override
    public String[] getParameterValues(final String name)
    {
        return getParameterMap().get(name);
    }
}</pre>

Once you have your handy request wrapper, you can get working! Keep in mind that you'll need to do a servlet forward if you want your entire system to gain access to your new parameters. Otherwise, you can just pass this new wrapped object around as needed.

<pre lang="java">
    //"request" is the current HttpServletRequest
    Map<String, String[]> extraParams = new TreeMap<String, String[]>()
    HttpServletRequest wrappedRequest = new PrettyFacesWrappedRequest(request, extraParams);
    request.getRequestDispatcher("url").forward(wrappedRequest, response)
</pre>

Happy hacking! ;) As a final note, I'd like to say that <a href="http://java.sun.com/developer/technicalArticles/JavaEE/JavaEE6Overview.html">JEE 6</a> has really turned out to be a great experience. Very pleasant to program on. Well done, SUN!