.categories ['PrettyFaces']
.dateCreated 20100706T11:18:56
.date_modified 20100706T20:34:23
.date_modified_gmt 20100707T00:34:23
.link http://ocpsoft.org/prettyfaces/annotations-support-is-coming-to-prettyfaces-url-rewriting/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords 
.permaLink http://ocpsoft.org/prettyfaces/annotations-support-is-coming-to-prettyfaces-url-rewriting/
.post_status publish
.postid 1350
.title Annotations support is coming to PrettyFaces: URL-rewriting
.userid 13
.wp_author_display_name Christian Kaltepoth
.wp_author_id 13
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 
.wp_slug annotations-support-is-coming-to-prettyfaces-url-rewriting
The PrettyFaces team is currently working on an alternative way to configure URL mappings. PrettyFaces will soon allow to use annotations instead of the classic XML configuration file to declare mappings. We encourage everyone interested in PrettyFaces to take a look at this new way of configuration and share his or her opinion with us.
<!--more-->
<h2>Examples</h2>

This section shows some simple examples for the annotation support of PrettyFaces. For details refer to the <a href="http://ocpsoft.com/docs/prettyfaces/snapshot/en-US/html_single/#config.annotations">Annotation-based configuration chapter</a> in the current snapshot of the <a href="http://ocpsoft.com/docs/prettyfaces/snapshot/en-US/html_single/">PrettyFaces Reference Documentation</a> (note, this documentation will be merged into the primary PrettyFaces reference guide once released.)

<strong>Declaring a URL mapping</strong> using annotations is straight forward. Just add a @URLMapping to the class primarily responsible for the page. The annotation requires you to specify the ID of the mapping, the URL pattern and the view to render:

<pre lang="java">@URLMapping(id="login", pattern="/login", viewId="/login.jsf")
public class LoginBean {
  /* your code */
}</pre>

<strong>Path parameters</strong> can be embedded in the URL pattern as already known from the XML configuration:

<pre lang="java">@URLMapping(id="viewStory", pattern="/story/#{storyBean.currentStoryId}", viewId="/story-view.jsf")
public class StoryBean {

  private Long currentStoryId;

  /* your code */
}</pre>

To use <strong>query parameters</strong>, just annotate the target property with a @URLQueryParameter annotation. The query parameter will automatically refer to the mapping declared on the class.

<pre lang="java">@URLMapping(id="viewStory", pattern="/story/view", viewId="/story-view.jsf")
public class StoryBean {

  @URLQueryParameter("id")
  private Long currentStoryId;

  /* your code */
}</pre>

If you want to use <strong>page actions</strong>, just add a @URLAction annotation to the methods you want to be executed.

<pre lang="java">@URLMapping(id="viewStory", pattern="/story", viewId="/story.jsf")
public class StoryBean {

  @URLQueryParameter("id")
  private Long currentStoryId;

  private Story story;

  @URLAction
  public void loadStory() {
    
    // load the story 
    story = myStoryDao.getById( currentStoryId );

  }

  /* more code */
  
}</pre>

Please note that all annotations accept a wide range of additional options to customize the mapping. As they are very similar to the well known syntax of the classic XML configuration you should quickly get familiar with them.

<h3>Give it a try</h3>

Want to take a look at the new annotations support in PrettyFaces? Please do! We are always looking for people helping us testing the new features.

The current snapshots are regularly deployed to the following Maven repository:

<pre lang="xml"><repository>
  <id>ocpsoft</id>
  <name>OcpSoft</name>
  <url>http://ocpsoft.com/repository/</url>
  <releases>
    <enabled>true</enabled>
  </releases>
  <snapshots>
    <enabled>true</enabled>
  </snapshots>
</repository></pre>

Depending on your JSF version, add the PrettyFaces dependency to your <a href="http://maven.apache.org">Maven</a> pom.xml:

<h4>For JSF 2.0:</h4>

<pre lang="xml"><dependency>
  <groupId>com.ocpsoft</groupId>
  <artifactId>prettyfaces-jsf2</artifactId>
  <version>3.0.2-SNAPSHOT</version>
</dependency></pre>

<h4>For JSF 1.2:</h4>

<pre lang="xml"><dependency>
  <groupId>com.ocpsoft</groupId>
  <artifactId>prettyfaces-jsf2</artifactId>
  <version>3.0.2-SNAPSHOT</version>
</dependency></pre>

PrettyFaces will support annotations out of the box, nevertheless, it is strongly recommended to specify the packages to scan for annotations; just add the following configuration to your <strong>web.xml</strong>:

<pre lang="xml"><context-param>
  <param-name>com.ocpsoft.pretty.BASE_PACKAGES</param-name>
  <param-value>com.example.myapp</param-value>
</context-param></pre>

That's it! :-) If you have any feedback or questions, please ask on the <a href="http://ocpsoft.com/support/">OcpSoft Support Forums</a>, or the <a href="http://groups.google.com/group/prettyfaces-users">OcpSoft Users Group Mailing List</a>. For more information, visit the <a href="http://ocpsoft.com/prettyfaces/">PrettyFaces home page</a>. Thanks!