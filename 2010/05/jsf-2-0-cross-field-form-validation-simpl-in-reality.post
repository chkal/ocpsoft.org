.categories ['Java', 'OpenSource', 'Seam']
.dateCreated 20100505T10:55:50
.date_modified 20100506T11:50:00
.date_modified_gmt 20100506T15:50:00
.link http://ocpsoft.org/java/jsf-2-0-cross-field-form-validation-simpl-in-reality/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords 
.permaLink http://ocpsoft.org/java/jsf-2-0-cross-field-form-validation-simpl-in-reality/
.post_status publish
.postid 1254
.title JSF 2.0 Cross-field Form Validation - Simple in Reality
.userid 3
.wp_author_display_name Lincoln Baxter III
.wp_author_id 3
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 
.wp_slug jsf-2-0-cross-field-form-validation-simpl-in-reality
I'd like to start by saying that using JSF by itself can sometimes feel trying to pull your own teeth out with a pair of tweezers, but there's hope. JSF was designed to be a platform of extensions - a foundation for building web-frameworks, and that it's done very well. JSF 2.0 addresses most of the concerns about usability (so there's less tooth pulling,) and provides even more extensibility. That's where <a target="_blank" href="http://seamframework.org/Seam3/FacesModule">Seam Faces</a> comes in, that's where <a href="http://ocpsoft.com/prettyfaces/">PrettyFaces</a> comes in.

On many occasions you might find yourself  needing to compare the values of multiple input fields on a given page submit: confirming a password; re-enter password;  address lookups; and so on. Performing cross-field form validation is simple - just place Seam's  &lt;s:validateForm&gt; component in the form you wish to validate, then attach your custom Validator.
<!--more-->
I'd like to introduce you to Seam's intuitive answer, taken directly out of the <a target="_blank" href="http://docs.jboss.org/seam/3/faces/reference/snapshot/en-US/html_single/#validateForm">reference manual</a>. If you want to try it out, you can <a target="_blank" href="http://seamframework.org/Seam3/FacesModule">check out</a> the source or use a snapshot:

<pre lang="xml">
        <dependency>
            <groupId>org.jboss.seam.faces</groupId>
            <artifactId>seam-faces</artifactId>
            <version>${seam-faces-version}</version>
        </dependency>
</pre>

<h2>Seam Faces' &lt;s:validateForm&gt;</h2>
<pre lang="xml"><h:form id="locationForm">
     <h:inputText id="city" value="#{bean.city}" />
     <h:inputText id="state" value="#{bean.state}" />
     <h:inputText id="zip" value="#{bean.zip}" />
     <h:commandButton id="submit" value="Submit" action="#{bean.submitPost}" />

      <s:validateForm validatorId="locationValidator" />
</h:form></pre>
The corresponding Validator for the example above would look  something like this:
<pre lang="java">@FacesValidator("locationValidator")
public class LocationValidator implements Validator
{
   @Inject
   Directory directory;

   @Inject
   @InputField
   private Object city;

   @Inject
   @InputField
   private Object state;

   @Inject
   @InputField
   private ZipCode zip;

   @Override
   public void validate(final FacesContext context, final UIComponent comp, final Object values) throws ValidatorException
   {
      if(!directory.exists(city, state, zip))
      {
         throw new ValidatorException(new FacesMessage("Sorry, that location is not in our database. Please try again."));
      }
   }
}</pre>

<h2>Tip - You may inject the correct type directly.</h2>
<pre lang="java">@Inject
@InputField
private ZipCode zip;</pre>

Notice that the IDs of the inputText components  match the IDs of your Validator @InputFields; each @Inject @InputField member will be injected with  the value of the form input field who's ID matches the name of the variable.

In other words - the name of the @InputField  annotated member variable will automatically be matched to the ID of the input component, unless overridden by  using a field ID alias (see below.) 
<pre lang="xml"><h:form id="locationForm">
     <h:inputText id="cityId" value="#{bean.city}" />
     <h:inputText id="stateId" value="#{bean.state}" />
     <h:inputText id="zip" value="#{bean.zip}" />
     <h:commandButton id="submit" value="Submit" action="#{bean.submitPost}" />

      <s:validateForm fields="city=cityId state=stateId" validatorId="locationValidator" />
</h:form></pre>
The field with ID "zip" will still be referenced  normally; you need only specify aliases for fields that differ in name from the Validator  @InputFields.

<h2>Tip - Using @InputField</h2>
Using  <code>@InputField("customID")</code> with an ID override can also be used to specify a custom ID, instead of using the default: the name of the  field. This gives you the ability to change the name of the private field, without  worrying about changing the name of input fields in the View itself. 
<pre lang="java">@Inject
@InputField("state")
private String sectorTwo;</pre>

<h2>A few last thoughts</h2>
First, as of the current version, cross-field validation does not work unless you are using the &lt;s:validateForm&gt; component. As soon as a new version of <a target="_blank" href="http://seamframework.org/Weld/PortableExtensionsPackage">weld-extensions</a> is released, however, this functionality will work even without the &lt;s:validateForm&gt; component, and you'll be able to reference cross-fields in any JSF validator!

For right now, however, you'll have to deal with using the component - but - it's really not that complicated if you think about it ;) Happy coding!