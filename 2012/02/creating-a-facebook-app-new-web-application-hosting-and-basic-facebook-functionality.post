.categories ['Facebook', 'OpenSource']
.dateCreated 20120226T22:06:47
.date_modified 20130419T18:41:59
.date_modified_gmt 20130419T22:41:59
.link http://ocpsoft.org/opensource/creating-a-facebook-app-new-web-application-hosting-and-basic-facebook-functionality/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords 
.permaLink http://ocpsoft.org/opensource/creating-a-facebook-app-new-web-application-hosting-and-basic-facebook-functionality/
.post_status publish
.postid 3297
.title Creating a Facebook App with Java - Part 2 - Application, Hosting, and Basic Functionality
.userid 602
.wp_author_display_name Craig Schwarzwald
.wp_author_id 602
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 3285
.wp_slug creating-a-facebook-app-new-web-application-hosting-and-basic-facebook-functionality
[toc][/toc]

The <a href="http://ocpsoft.org/opensource/creating-a-facebook-app-setup-and-tool-installation/" title="Facebook Application Development | Tutorial | Example | Java | Cloud">first article</a> in our series took care of setting up and installing an IDE, some tools, and signing up for your new app at Facebook. Now we'll begin creating the Web application with a landing page and some basic Facebook API calls. We'll be creating our web application using Forge - where we left off in the <a href="http://ocpsoft.org/opensource/creating-a-facebook-app-setup-and-tool-installation/" title="Facebook Application Development | Tutorial | Example | Java | Cloud">part one</a>. Because Forge allows us to start our new application very easily, and streamlines things like adding persistence (and eventually Arquillian, the testing framework) with a single command.
<!--more-->
<h1>Create a basic web project using JBoss Forge</h1>

<a href="http://jboss.org/forge">JBoss Forge</a> is an incredibly powerful tool for creating new applications; it's possible to set up much functionality very quickly. We're going to tap into only a small fraction of its extreme powers to jump start our Facebook app. If you don't have your Forge console open, run Forge by opening a new terminal and typing <code>forge</code>. Once it's is running, you can hit &lt;TAB&gt; at any time to see auto-completion suggestions.

[info]If you get an error saying <code>forge</code> is not a recognized command, make sure you have correctly <a href="https://docs.jboss.org/author/display/FORGE/Installation" target="_blank">installed Forge</a>. Re-run your profile, and try to open forge again.[/info]

It's now time to <a href="http://ocpsoft.org/wp-content/uploads/2012/03/CreateProjectInForge.png" rel="lightbox[7]">create our project</a> - we will ask forge to do this for us with the following command. Note how your project is automatically set up using the default <a href="http://maven.apache.org" target="_blank">Maven</a> project format:

<div class="alert command"><pre>forge&gt; new-project --named FBTutorialDemo --topLevelPackage com.example</pre></div>

<h1>Set up the database</h1>

Next, we will set up a persistence context so we can do things like handle user registrations and process game events. We'll use JBoss's <a href="http://jboss.org/hibernate" target="_blank">Hibernate</a> (via the standard Java Persistence API.)  With Forge this is extremely easy to set up; otherwise, we would need to do a fair amount of XML configuration by hand.

For now, the persistence context we set up will use an in-memory database, meaning it will only retain information during the time in which the application is deployed. In other words, every time you restart your server or redeploy, your application database will be wiped out and recreated on the next start up. Don't worry though, we'll set up a MySQL DB to store our data more permanently, later.

In our Forge terminal, type the following command. Please note that if you are using GlassFish, you will need to use <a href="http://ocpsoft.org/wp-content/uploads/2012/03/HibernateSetupInForge.png" rel="lightbox[7]">different parameters</a> for both the provider and container arguments, but by pressing &lt;TAB&gt;, you will see a list of all available options:

[command]persistence setup --provider HIBERNATE --container JBOSS_AS7[/command]

Forge will then ask you if you also want to install extended APIs, you can use the default of 'No' (just hit &lt;ENTER&gt;). You should then see confirmation that Forge wrote <code>pom.xml</code> and <code>persistance.xml</code>.

[snippit filename="/src/main/resources/META-INF/persistence.xml" label="View complete file" href="https://github.com/CavemanCraig/FBTutorialDemo/blob/e4ad62d97c4cdd786dc71a12b285f01a819b1c1b/src/main/resources/META-INF/persistence.xml"]
<persistence>
  <persistence-unit name="forge-default" transaction-type="JTA">
    <description>Forge Persistence Unit</description>
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
    <jta-data-source>java:jboss/datasources/ExampleDS</jta-data-source>
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
      <property name="hibernate.hbm2ddl.auto" value="create-drop"/>
      <property name="hibernate.show_sql" value="true"/>
      <property name="hibernate.format_sql" value="true"/>
      <property name="hibernate.transaction.flush_before_completion" value="true"/>
    </properties>
  </persistence-unit>
</persistence>
[/snippit]

<h3>Create @Entity objects to describe our app's database schema</h3>

We will now continue to create several <code>@Entity</code> objects to store Users having a facebookID:<code>long</code>, name:<code>String</code>, and imageURL:<code>String</code>. These will represent any/all basic Facebook Users; our players and each of their friends will be set up as a User. We'll also create a Player object having a playerInfo:<code>User</code>, points:<code>long</code>, and friendList:<code>ArrayList&lt;Long&gt;</code> (to store FacebookIDs of all the friends of that User).

In the Forge window type the commands to set up our User object, results should look something <a href="http://ocpsoft.org/wp-content/uploads/2012/03/CreateUserEntityInForge.png" rel="lightbox[7]">like this</a>.

[command]
entity --named User --package ~.domain
field long --named facebookID
field string --named  name
field string --named imageURL
[/command]

[info]If you get stuck, remember to press &lt;TAB&gt; to get Forge to give you hints on what to type next.[/info]

Now <a href="http://ocpsoft.org/wp-content/uploads/2012/03/CreatePlayerEntityInForge.png" rel="lightbox[7]">create the Player object</a> in the same fashion. Be aware that the <code>playerInfo</code> and <code>friendList</code> fields have to be set up a little differently because of their non-native types.

[command]
entity --named Player --package ~.domain
field oneToOne --named user --fieldType ~.domain.User.java
field long --named points
field custom --named friendList --type java.util.ArrayList
[/command]

We are now ready to check our pulse. Make sure things work so far by using the <code>build</code> command.  You should <a href="http://ocpsoft.org/wp-content/uploads/2012/03/BuildSuccess.png" rel="lightbox[7]">see this.</a>


<h1>Setup CDI, EJB,and REST</h1>

If you are using Forge, you may perform this entire step by using <a href="http://ocpsoft.org/wp-content/uploads/2012/03/SetupBeansEjbRestInForge.png" rel="lightbox[7]">the following command.</a> Here we instruct forge to set up CDI, EJB, and JAX-RS (REST) and specify that we want to use <code>/rest/*</code> as the root URL from which REST Endpoints will handle requests.

[command]
forge> setup beans ejb rest
[/command]

Forge may ask you to update the packaging to a [war] file which is what we want, so hit &lt;ENTER&gt; to accept the default.  We also need to specify a REST endpoint.  We again want the default of /rest/* (hit &lt;ENTER&gt; again).

<h3>Verify your <code>web.xml</code></h3>

If you are not using Forge, or would like to know what the plugin has done for us, we need to make sure that the following lines are in <code>web.xml</code>. This configuration activates our JAX-RS WebService:

[snippit filename="/src/main/webapp/WEB-INF/web.xml" label="View complete file" href="https://github.com/CavemanCraig/FBTutorialDemo/blob/e4ad62d97c4cdd786dc71a12b285f01a819b1c1b/src/main/webapp/WEB-INF/web.xml"]
<web-app>

  <servlet-mapping>
    <servlet-name>javax.ws.rs.core.Application</servlet-name>
    <url-pattern>/rest/*</url-pattern>
  </servlet-mapping>
</web-app>
[/snippit]

Literally speaking, <code>&lt;url-pattern&gt;</code> tells our application that we want to use JAX-RS, and specifies which requests will get routed to our endpoints. In this case, any request with a URL like http://yourapp-yourdomain.rhcloud.com/rest/<em>*anything*</em> will get caught and routed to our REST services.

<h3>Verify your <code>beans.xml</code></h3>

We've also created a new file called <code>beans.xml</code>, which is repsonsible for activating CDI in our project. This file can be empty, or if desired, you can include the minimal XML. (We won't add anything to this configuration beyond the empty file, so you can do what you like.)

[snippit filename="/src/main/webapp/WEB-INF/beans.xml" label="View complete file" href="https://github.com/CavemanCraig/FBTutorialDemo/blob/e4ad62d97c4cdd786dc71a12b285f01a819b1c1b/src/main/webapp/WEB-INF/beans.xml"]
<beans />
[/snippit]

<h3>Verify your <code>pom.xml</code></h3>

We may at this point wish to check our POM file (pom.xml) to ensure that we have all of the proper dependencies for our application. Our POM should look something like this:

[snippit filename="/pom.xml" label="View complete file" href="https://github.com/CavemanCraig/FBTutorialDemo/blob/e4ad62d97c4cdd786dc71a12b285f01a819b1c1b/pom.xml"]
<project>
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.example</groupId>
	<artifactId>FBTutorialDemo</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.jboss.spec</groupId>
				<artifactId>jboss-javaee-6.0</artifactId>
				<version>2.0.0.Final</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>
	<dependencies>
		<dependency>
			<groupId>org.jboss.spec.javax.servlet</groupId>
			<artifactId>jboss-servlet-api_3.0_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.ws.rs</groupId>
			<artifactId>jboss-jaxrs-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.xml.bind</groupId>
			<artifactId>jboss-jaxb-api_2.2_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.enterprise</groupId>
			<artifactId>cdi-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.annotation</groupId>
			<artifactId>jboss-annotations-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.hibernate.javax.persistence</groupId>
			<artifactId>hibernate-jpa-2.0-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.ejb</groupId>
			<artifactId>jboss-ejb-api_3.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>org.jboss.spec.javax.transaction</groupId>
			<artifactId>jboss-transaction-api_1.1_spec</artifactId>
			<scope>provided</scope>
		</dependency>
	</dependencies>
	<build>
		<finalName>FBTutorialDemo</finalName>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
[/snippit]

[warn]Your POM file may contain different dependencies depending on whether or not you used Forge to set up your project, and which Forge version you've used. But the key point is that you need to have the JAX-RS, JPA, and CDI API libraries available for your project to compile.[/warn]

At present, the current configuration of JAX-RS is assuming (and requiring) that you have a class set up with a <code>@Path</code> defined.  Since we need to define where we are going to route our requests when they hit our <code>servlet-mapping</code> of <code>/rest/*</code>.  For now we can simply <a href="http://ocpsoft.org/wp-content/uploads/2012/03/CreateMyWebServiceShellInForge.png" rel="lightbox[7]">create a shell of our WebService class</a>, but leave the implementation for a later article.

[command]
forge> entity --named MyWebService --package ~.domain
forge> edit
[/command]

This will open the MyWebService.java file in your <a href="http://ocpsoft.org/wp-content/uploads/2012/03/EditMyWebServiceThroughForge.png" rel="lightbox[7]">default editor</a>.  Clear out the entire file, and paste in the shell code below:

[snippit]
package com.example.domain;

import javax.ws.rs.Path;

@Path("/webService")
public class MyWebService {

}
[/snippit]

<h4>Get caught up</h4>
If you had any trouble following along, simply grab the code to this point from github tag: <a href="https://github.com/CavemanCraig/FBTutorialDemo/tags" target="_blank">v0.1.zip — Setup CDI, EJB, and REST</a>.

<h1>Register with OpenShift and get your project hosted</h1>

Now that we have a few <code>@Entity</code> objects in our project (even if it doesn't quite do much at the moment), our next step is to host it somewhere.  If you'd like, you can simply host it on your local machine at <a href="http://localhost:8080/" target="_blank">http://localhost:8080/</a>, but we're going to take you through setting up an account and hosting at Red Hat's <a href="http://openshift.com" target="_blank">OpenShift</a> platform which is completely free.  The huge benefit here is not having to worry about blackouts, or just needing to restart your machine for some reason, as well as giving your site more dedicated bandwidth. OpenShift also offers options to expand on size and bandwidth from their free version if/when your app takes off.

Go to: <a title="https://openshift.redhat.com/app/" href="https://openshift.redhat.com/app/">https://openshift.redhat.com/app/</a> and click the button to "Sign up and try it"; make sure to provide all of the <a href="http://ocpsoft.com/wp-content/uploads/2012/02/OpenShiftSignUp.jpg" rel="lightbox[8]">necessary fields</a>.

OpenShift will then send you an email to the address you provided them.  You'll have to click the link in the email to validate your email address with them, retype your password, and sign in. Once logged in, you'll need to accept the legal terms.

[info]You can continue to follow this guide which will show you how to deploy your newly created app to your OpenShift site. If you feel like doing things the complicated way, you can also follow OpenShift's own quick start guide <a title="here" href="https://openshift.redhat.com/app/express#quickstart">here</a>, without Forge.[/info]

We need to install <a href="http://git-scm.com/" target="_blank">Git</a>, and a few other things before we can upload our project to the cloud, but fortunately should take only a few seconds (except maybe for the Windows users.) This command must be run from a non-Forge command prompt (all others may be run within Forge:)

[command]sudo apt-get install git[/command]	

Now install the OpenShift Express Forge plugin. In Forge, type the <a href="http://ocpsoft.org/wp-content/uploads/2012/03/InstallOpenshiftExpressInForge_StartLike.png" rel="lightbox[8]">following commands</a> from any directory within your project:

[command]
forge install-plugin openshift
rhc-express setup
[/command]

[warn]You will need to re-type your OpenShift account information into the <a href="http://ocpsoft.org/wp-content/uploads/2012/03/RunningRhcExpressSetupInForge.png" rel="lightbox[8]">Forge console</a>. Also note that it may take several minutes to complete this process.[/warn]

Once DNS resolution has finally completed and OpenShift is set up in our project, we can push our changes to Openshift with a <a href="http://ocpsoft.org/wp-content/uploads/2012/03/UploadToOpenShift.png" rel="lightbox[8]">simple set of commands</a>. This is all we'll need to do from now on:

[command]
git add –A
git commit –a –m “Comment Here”
rhc-express deploy
[/command]

[error]Make sure any time you are trying to save/upload changes that you are adding and commiting from the root of the .git repository (aka the project folder) to ensure all changes in the project get updated.[/error]

These commands will mark all files to be sent to the server, set the messages associated with this particular commit, and then upload the new git repository, build, and redeploy the application to the cloud for us in mere seconds!

If you'd like, you can also store your code on <a href="http://github.com" target="_blank">GitHub</a> as well, like I've done. Once you have created a GitHub account, and a new project to contain your code, you can push your code with just a <a href="http://ocpsoft.com/wp-content/uploads/2012/02/UploadToGithub.jpg" rel="lightbox[8]">few commands</a>.

[command]
git remote add github https://MY_GITHUB_URL
git push github master
[/command]

The repository, aka MY_GITHUB_URL can be found directly on the GitHub project page; fortunately, after this initial setup, you can upload your code to GitHub at any time simply by repeating the following commands from the root folder of your project:

[command]	 
git add –A	 
git commit –a –m "Description of change"	 
git push github	 
[/command]	 


<h1>Test your cloud connection</h1>

We're going to do some fine tuning, adding specific code blocks to our project, and while some of these things can be done within Forge, it's easier to use a full graphical editor for this step. If you created your project using Forge from within Eclipse, you can skip this step; otherwise, we need to <a href="http://ocpsoft.com/wp-content/uploads/2012/02/EclipseImportMavenProject.jpg" rel="lightbox[9]">import our project</a> into the Eclipse workspace before moving forward.

Open Eclipse and <strong>Click</strong> <code>File -&gt; Import -&gt; Maven -&gt; Existing Maven Projects</code>. Browse to the maven project, <a href="http://ocpsoft.org/wp-content/uploads/2012/03/ImportProjectToEclipse.png" rel="lightbox[9]">import it</a>, and create a new file <a href="http://ocpsoft.org/wp-content/uploads/2012/03/CreateIndex-htmlInEclipse.png" rel="lightbox[9]">called index.html</a> in the <code>scr/main/webapp</code> directory. (If the file already exists, you may simply delete its contents and replace them with the following HTML snippit.) This file will greet our users when they access our application.

[snippit filename="index.html" label="View complete file" href="https://github.com/CavemanCraig/FBTutorialDemo/blob/8827ddeeab14e99c236e798e8893cffa98f5e650/src/main/webapp/index.html"]
<html>
	<body>
		<center>
		<H1>Welcome</H1>
		<P/>
		<H3>To Tutorial Demo</H3>
		</center>
	</body>
</html>
[/snippit]

The above simply displays a heading welcoming you to the Tutorial Demo.  We can now use this to confirm that our app is being loaded correctly.

<h2>Save point - don't lose your work!</h2>
Lets rebuild and get this new code up to our OpenShift hosting service so we can check out our new landing page.  Go back to the forge console and type:

[command]
git add –A
git commit –a –m “Initial Index html file”
rhc-express deploy
[/command]

We can now go to the OpenShift site (http://yourapp-yourdomain.rhcloud.com/index.html) where our app is being hosted and test to make sure we see our Welcome header. (Mine is hosted <a href="http://FBTutorialDemo-schwarzwaldomain.rhcloud.com/index.html" target="_blank">here</a>.)

[warn]Make sure to replace "yourapp" with your application name, and "yourdomain" with your OpenShift domain name.[/warn]

<h4>Get caught up</h4>
If you had any trouble following along, simply grab the code to this point from github tag: <a href="https://github.com/CavemanCraig/FBTutorialDemo/tags" target="_blank">v0.2.zip — Test your cloud connection</a>.

<h1>Configure Facebook to use your new Domain</h1>

Go back to the Facebook app page at: <a title="https://developers.facebook.com/apps" href="https://developers.facebook.com/apps">https://developers.facebook.com/apps</a>

Click the "Edit Settings" link (<a href="http://ocpsoft.com/wp-content/uploads/2012/02/FacebookCanvasSettings.jpg" rel="lightbox[10]">near the top right</a>), and enter your OpenShift application's web address into the Canvas URL and Secure canvas URL.

[info]OpenShift lets you use http:// or https:// to access your app through non-secure or secure respectively.[/info]

<b>CONGRATULATIONS!!!</b>  You now have an official Facebook app (try not to laugh at the fact that it doesn't yet do anything; now we'll take care of adding functionality to it in part three.)

From now on you'll be able to access your site and updated code immediately after you upload it to OpenShift at any time by going to: <a title="https://apps.facebook.com/yourapp/index.html" href="https://apps.facebook.com/yourapp/index.html">https://apps.facebook.com/yourapp/index.html</a>

[warn]In the URL, you will need to replace "yourapp" with your application name. (E.g: Mine is hosted <a href="https://apps.facebook.com/tutorialdemo/index.html" target="_blank">here</a>.)[/warn]


<h1>Add Facebook connectivity using the Javascript API</h1>

This guide references the <a href="http://developers.facebook.com/docs/reference/javascript/" target="_blank">Facebook Javascript SDK</a>. I highly recommend you install a JavaScript editor plugin for Eclipse.  Without such a plugin, simple formatting and/or styling issues can be tough to catch if there are errors in the code.  Plus it just makes viewing the code easier.  You can use <a href="http://aptana.com/" target="_blank">Aptana</a> by going into Eclipse and clicking to <code>Help -&gt; Install New Software</code>, and using the URL: <a title="http://update.aptana.com/update/studio/3.2" href="http://update.aptana.com/update/studio/3.2">http://update.aptana.com/update/studio/3.2</a>

Many methods in many of the APIs haven't been marked deprecated when Facebook wants to phase them out, they are just removed when made obsolete.  Thus, code that would have worked when certain tutorials or blog/forum posts were written may not work anymore.  This is just something to be wary of when taking code from online sources other than <a href="http://developers.facebook.com/docs/reference/javascript/" target="_blank">Facebook itself</a> to try to get functionality working on your own app.

[warn]It is important to note that there have been many versions of all the different Facebook APIs, and some may be no longer be supported. Even if the API <em>is</em> supported, make sure to check Facebook to ensure the API method you're trying to use still exists when taking code from forums and tutorials for help.

I originally got caught using an old version number of the PHP API in my first attempt at writing a Facebook app.  When I found and logged issues Facebook's solution was to have me use the most recent version of the PHP API instead.  However, when I simply updated the version number other functionality no longer worked the same way, I eventually gave up and started over to write this tutorial using JavaScript.[/warn]

<h3>Update src/main/webapp/index.html</h3>

[snippit filename="/src/main/webapp/index.html" label="View complete file" href="https://github.com/CavemanCraig/FBTutorialDemo/blob/96643ec2698769765655741fbc87be8f96cdbbc7/src/main/webapp/index.html"]

<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" 
      xmlns:fb="http://www.facebook.com/2008/fbml">
   <head>
       <meta http-equiv="Content-Type"
             content="text/html; charset=UTF-8"/>
       <title>Welcome to Tutorial Demo</title>
   </head>
   <body>

       <!-- <fb:login-button autologoutlink="true" 
        perms="email,status_update,publish_stream">
            </fb:login-button></p>
        -->
       <fb:login-button autologoutlink="true">
       </fb:login-button>

       <div id="fb-root"></div>
       <script type="text/javascript">
           window.fbAsyncInit = function() {
               FB.init({appId: ' YOUR_APP_ID', 
                  status: true, 
                  cookie: true, 
                  xfbml: true});
            };
           (function() {
               var e = document.createElement('script');
               e.type = 'text/javascript';
               e.src = document.location.protocol +
                   '//connect.facebook.net/en_US/all.js';
               e.async = true;
               document.getElementById('fb-root')
                                      .appendChild(e);
           }());
       </script>
       
       <center>
       <H1>Welcome to Tutorial Demo</H1><P /><BR />
       <a href='myInfo.html'>Get Your Info Here</a><BR />
       <a href='friendsInfo.html'>
                Get Your Friends Info Here</a>
       </center>
       
</body>
</html>

[/snippit]

[error]Make sure to replace the <code>YOUR_APP_ID</code> with your own app's actual <code>appId</code> (in this file, and all other <code>html</code> files throughout the tutorial.)[/error]

The <code>&lt;fb:login-button&gt;</code> tag will add a Facebook login/out button to the site. Facebook will handle all the logic around if the user is logged in or not, and all the credentials of valid username/password etc. The commented out version of the <code>&lt;fb:login-button&gt;</code> shows you how you can access more of the Facebook data model, however if you add additional permissions here, you will need to get each user to grant access for those permissions before you can access that type of data from their accounts.

If the users do not want to allow the additional access, they can not enter your app at all, so be careful not to require permissions unless you really need them, as it could cost you some user base. The next block of code allows you to utilize the Facebook Javascript API library on our page. Lastly, we put links on the page for myInfo and friendsInfo where we will have our 2 API calls.

<h3>Create <code>src/main/webapp/myInfo.html</code></h3>

[snippit filename="/src/main/webapp/myInfo.html" label="View complete file" href="https://github.com/CavemanCraig/FBTutorilDemo/blob/96643ec2698769765655741fbc87be8f96cdbbc7/src/main/webapp/myInfo.html"]
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:fb="http://www.facebook.com/2008/fbml">
  <head>
      <meta http-equiv="Content-Type" 
            content="text/html; charset=UTF-8"/>
      <title>Tutorial Demo - My Info</title>
  </head>
  <body>

      <div id="fb-root"></div>
      <center>
         <h2>Here is your Facebook Data:</h2><p/>
      <div id="user-info"></div>
      </center>
      <a href='index.html'>
           Go back to main page</a><br />
      <script type="text/javascript">
          window.fbAsyncInit = function() {
              FB.init({appId: 'YOUR_APP_ID', 
                 status: true, 
                 cookie: true, 
                 xfbml: true, 
                 oauth: true});

              FB.Event.subscribe('auth.login', 
                                function(response) {
                  getMyInfo();
              });

              FB.getLoginStatus(function(response) {
                  if (response.authResponse) {
                      getMyInfo();
                  }
              });
          };
          (function() {
              var e = document.createElement('script');
              e.src = document.location.protocol +
                  '//connect.facebook.net/en_US/all.js';
              e.async = true;
              document.getElementById('fb-root')
                                     .appendChild(e);
          }());

          function getMyInfo(){
             FB.api('/me', function(response) {
             var userInfoElem = 
                  document.getElementById('user-info');
             userInfoElem.innerHTML =
                  '<img src="https://graph.facebook.com/'
               + response.id 
               + '/picture" style="margin-right:5px"/><br />'
               + response.name;
             });
          }
      </script>
</body>
</html>
[/snippit]

Here we do the same thing with <code>&lt;div id="fb-root"&gt;</code> to add the FB Javascript API access to our page.  However, notice that this time we are also adding some code to the <code>window.fbAsyncInit = function() </code> method to call our custom function <code>getMyInfo()</code> when the user either; (a) logs on through our button via: <code>FB.Event.subscribe('auth.login', function(response) {</code>, or (b) Facebook has determined the user is already logged on via: <code>if (response.authResponse)</code> respectively.

Then we get to the heart of this page, our custom <code>function getMyInfo()</code>. This method uses Javascript to make a GraphAPI call to FB for <code>"/me"</code> which returns the current logged in FB users info. The info gets returned to us from Facebook in the response object. In this case we have access to response.id and response.name being the FacebookID and name of the current person logged in. 

[info]We can get anyone's FB profile image with their ID using the GraphAPI as the code does by using "https://graph.facebook.com/<code>response.id</code>/picture".[/info]

<h3>Create <code>src/main/webapp/friendsInfo.html</code></h4>

[snippit filename="/src/main/webapp/friendsInfo.html" label="View complete file" href="https://github.com/CavemanCraig/FBTutorilDemo/blob/96643ec2698769765655741fbc87be8f96cdbbc7/src/main/webapp/friendsInfo.html"]
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:fb="http://www.facebook.com/2008/fbml">
  <head>
      <meta http-equiv="Content-Type" 
            content="text/html; charset=UTF-8"/>
      <title>Tutorial Demo - Friends Info</title>
  </head>
  <body>

      <div id="fb-root"></div>
      <center>
         <h2>Here is the Facebook Data 
                for each of your friends:</h2></p>
      <div id="friend-info"></div>
      </center>
      <a href='index.html'>Go back to main page</a>
      <br />
      <script type="text/javascript">
          window.fbAsyncInit = function() {
                 FB.init({appId: 'YOUR_APP_ID', 
                 status: true, 
                 cookie: true, 
                 xfbml: true, 
                 oauth: true});

              FB.Event.subscribe('auth.login', 
                                function(response) {
                  getFriendsInfo();
              });

              FB.getLoginStatus(function(response) {
                  if (response.authResponse) {
                      getFriendsInfo();
                  }
              });
          };
          (function() {
              var e = document.createElement('script');
              e.src = document.location.protocol +
                  '//connect.facebook.net/en_US/all.js';
              e.async = true;
              document.getElementById('fb-root')
                                        .appendChild(e);
          }());

          function getFriendsInfo() {
               FB.api("/me/friends", function(response) 
               {
                   var allFriends = response.data;
                   var tableString = "<table>"
                   for(var i=0; i<allFriends.length; i++)
                   {
                       if(i % 5 == 0){
                           // Print out up to 5 friends 
                           // per table row, 
                           // then start a new row.

                           if(i==0){
                               // Begin the first TR
                               tableString = tableString 
                               + "<tr>";
                           }
                           else{
                               // End the last TR and 
                               // start a new one
                               tableString = tableString 
                               + "</tr><tr>";
                           }
                       }

                       tableString = tableString + "<td>" 
                  + "<img src='http://graph.facebook.com/" 
                  + allFriends[i].id + "/picture'> <br/>";

                       tableString = tableString 
                            + allFriends[i].name + '</td>';
                   }
                   tableString = tableString 
                            + '</tr></table>';
                   var friendInfoElem = 
                     document.getElementById('friend-info');

                     friendInfoElem.innerHTML = tableString;
               });
          }

      </script>
      
</body>
</html> 
[/snippit]

Here we use the same tactics as <code>myInfo.html</code> to get the API and Events added to the page (this time calling <code>getFriendsInfo()</code> instead of <code>getMyInfo()</code>). In our custom function for this page Facebook returns to us <code>response.data</code> which is a list of all the friends of the current user. We use this to loop through the list and print out their picture (from their <code>id</code>), and their full name (from their <code>name</code>). 

The loop creates a String with all the HTML tags necessary to print out this info to a table, with 5 friends per table row. If you haven't noticed before, we are actually using AJAX with these FB Javascript calls, which means we need to put &lt;div&gt; tags and then populate them asyncronysly with the results of the FB API calls once we get the response back. We can set the innerHTML of a div to whatever we want, and the browser will build the page just as if whatever is in the innerHTML property of the div tag was written in the html file directly once we get our response data back from Facebook. The last 2 lines of our method get the div element for <code>'friend-info'</code> and set it to the String we built in the loop containing the HTML for the table.

[info]If you need more test-data, you can always register test users and friend them (all you need is an email address for each one which you can keep getting from gmail or other email providers).[/info]

<h2>Save point - don't lose your work!</h2>

This is a good time to upload your changes to OpenShift and have it rebuild and redeploy these new files out to the facebook canvas site for us.  Once you get the new index and 2 new pages working, you can move on.  

[command]
git add –A
git commit -a -m "Description of change"
git push github
[/command]

<h4>Get caught up</h4>
If you had any trouble following along, simply grab the code to this point from github tag: <a href="https://github.com/CavemanCraig/FBTutorialDemo/tags" target="_blank">v0.3.zip — Add Facebook connectivity</a>.

<h1>Conclusion</h1>
Now that we have some minimal Facebook functionality on our site, our <a href="http://ocpsoft.org/opensource/creating-a-facebook-app-with-java-part-3-creating-a-webservice-and-the-game/" title="Facebook Application Development | Tutorial | Example | Java | Cloud">next article</a> will dive into some of the slightly more advanced topics such as setting up our game logic, handling players, and saving information to our database. Players will be rewarded points for correct answers, and deducted points for incorrect answers.

[info]Please watch our <a href="http://ocpsoft.com/feed/">RSS feed</a> and follow us on Twitter <a href="http://twitter.com/ocpsoft" title="Follow OCPsoft on Twitter">@ocpsoft</a> to receive notifications of new articles.[/info]