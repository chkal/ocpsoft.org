.categories ['Java', 'JBoss', 'OpenSource', 'Technology']
.dateCreated 20130225T21:03:44
.date_modified 20130225T21:20:45
.date_modified_gmt 20130226T02:20:45
.link http://ocpsoft.org/java/setting-up-google-oauth2-with-java/
.mt_allow_comments 1
.mt_allow_pings 1
.mt_excerpt 
.mt_keywords 
.permaLink http://ocpsoft.org/java/setting-up-google-oauth2-with-java/
.post_status publish
.postid 5357
.title Setting up Google OAuth2 with Java
.userid 979
.wp_author_display_name Matyas Danter
.wp_author_id 979
.wp_more_text 
.wp_password 
.wp_post_format standard
.wp_post_thumbnail 5431
.wp_slug setting-up-google-oauth2-with-java
[toc]
<img src="http://ocpsoft.org/wp-content/uploads/2013/02/oauth_logo.png" alt="oauth_logo" width="300" height="298" class="pull-right size-full wp-image-5431" style="margin-left: 15px; margin-bottom: 15px;" />

<p>For all of you who are trying to figure out how to integrate with Google's single sign-on functionality (like I've done for my own startup at <a href="http://tripgather.com" target="_blank">tripgather.com</a>), this article might be for you. I've taken the liberty of condensing all of the actual logic required to perform OAuth Google login, and provided it as a class and a JSP (seen below). In order to follow along better, I suggest cloning the <a href="http://github.com/mdanter/OAuth2v1" target="_blank">example GitHub repository</a>, and deploying to the application to your <a href="http://jboss.org/jbossas">server of choice</a>.</p>
<!--more-->
<h2 class="toc">Assumptions</h2>

<ul>
	<li>Familiarity with object oriented programming, Java, Maven, and Java EE</li>
	<li>An IDE, it helps if you are comfortable using one (i.e. Eclipse)</li>
	<li>Java application server listening on localhost:8080</li>
</ul>

<h2 class="toc">Prerequisites</h2>

<a href="http://ocpsoft.org/wp-content/uploads/2013/02/1google_oauth_access.png"><img src="http://ocpsoft.org/wp-content/uploads/2013/02/1google_oauth_access-300x281.png" alt="1google_oauth_access" width="300" height="281" class="pull-right size-medium wp-image-5361" style="margin: 15px; margin-right: 0px; margin-top: 0px;" /></a>

<ul>
	<li>Google API Access credentials (Client ID, Client Secret). Set it up here <a href='https://code.google.com/apis/console/'>https://code.google.com/apis/console/</a>
	</li>
	<li>Set up allowed Redirect URIs at <strong>Google API &rarr; API Access</strong>. Input: <code>http://localhost:8080/OAuth2v1/index.jsp</code></li>
	<li>The <a href="http://github.com/mdanter/OAuth2v1/" >source code</a> referenced in this article from GitHub.</li>
	<li>A positive outlook on life.</li>
</ul>

<p>Please use the link above to set up API Access Credentials. When you are finished, you will see a similar page to the one below. Use your Client ID/Secret from this page to replace the values of the String constants in <code>GoogleAuthHelper.java</code>.</p>


<h2 class="toc">Usage</h2>

<ol>
	<li>Add Client ID, and Client Secret parameters to <code>GoogleAuthHelper.java</code></li>
	<li>Compile the project:[command]$ mvn clean install[/command]</li>
<li>Deploy war to application server</li>
	<li>Browse to: <a href="http://localhost:8080/OAuth2v1/">http://localhost:8080/OAuth2v1/</a></li>
	<li>Click <b>&quot;log in with google&quot;</b> on top of the page</li>
</ol>


<h3 class="toc">1. Add Client ID and Secret</h3>
<p>Replace the constants following constant values in <code>GoogleAuthHelper.java</code> with the values provided to you by Google API Access.</p>

<pre lang="java">
/**
 * Please provide a value for the CLIENT_ID constant before proceeding, set this up at https://code.google.com/apis/console/
 */
private static final String CLIENT_ID = "YOUR ID HERE";

/**
 * Please provide a value for the CLIENT_SECRET constant before proceeding, set this up at https://code.google.com/apis/console/
 */
private static final String CLIENT_SECRET = "SUPER SECRET SAUCE";
</pre>


<h3 class="toc">2, 3, &amp; 4. Compile the Project, Deploy the WAR, Open that Browser</h3>
<p>This is a Maven based project, so issue a Maven install command to build the project and assemble the war file from the root of the project (where the pom.xml file is located).</p>

[command]
$ mvn clean install
[/command]

<p>When Maven is finished creating the web archive, deploy it to your favorite server and navigate to <a href="http://localhost:8080/OAuth2v1/">http://localhost:8080/OAuth2v1/</a></p>


<a href="http://ocpsoft.org/wp-content/uploads/2013/02/2click_auth.png"><img src="http://ocpsoft.org/wp-content/uploads/2013/02/2click_auth-300x226.png" alt="2click_auth" width="300" height="226" class="pull-right size-medium wp-image-5362" /></a>

<h3 class="toc">5. Click <b>&quot;log in with google&quot;</b></h3>

<p>Now that your app server is running, the application is deployed, and your web browser is pointed at the application's context root, you will see a page similar to the one below. I double dog dare you to click that log in button. You know you want to.</p>

<div class="clearer"></div>

[warn]
<a href="http://ocpsoft.org/wp-content/uploads/2013/02/3result.png"><img src="http://ocpsoft.org/wp-content/uploads/2013/02/3result-300x261.png" alt="3result" width="300" height="261" class="pull-right size-medium wp-image-5363" style="margin-left: 15px;" /></a>
<h4>After successful authentication you will see the page below, but there are a few important things to notice:</h4>

	<ol>
		<li>The URL changed, now it contains two request parameters, <b>state</b>,
			and <b>code</b>.
		</li>
		<li>The page contains JSON output of your google account's profile
			information.</li>
	</ol>
<div class="clearer"></div>
[/warn]


<h2 class="toc">Source Code</h2>

<p>The authentication is possible thanks to the <code>GoogleAuthorizationCodeFlow</code> class. This class uses the Builder pattern to provide most of its functionality. GoogleAuthHelper's no-argument constructor initializes the Flow using your client ID, secret, and other constants. The <code>buildLoginUrl()</code> method constructs the Google authentication URL based on the <code>CALLBACK_URI</code> and returns it as a Java String. This <code>CALLBACK_URI</code> must match one of the redirect URIs that you set up at Google's API Access page. Upon successful authentication, OAuth2 will redirect you to <code>CALLBACK_URI</code>, and append the <b>state</b> and <b>code</b> GET request parameters to it. Please note, that the state request parameter is only to help differentiate authentication providers (i.e. Facebook OAuth, Google OAuth, or your own custom OAuth provider). </p>

<p>We need to use the <b>code</b> GET request parameter as the input for the 	<code>getUserInfoJson(String authCode)</code> method. If all is well, this method will return a JSON encoded Google profile as a Java String.</p>

<h4>Here is the basic code that you can snip into your project:</h4>

[snippit filename="index.jsp" label="View Complete File" href="https://github.com/mdanter/OAuth2v1/blob/master/src/main/webapp/index.jsp"]
<%
/*
 * The GoogleAuthHelper handles all the heavy lifting, and contains all "secrets"
 * required for constructing a google login url.
 */
final GoogleAuthHelper helper = new GoogleAuthHelper();
if (request.getParameter("code") == null
	|| request.getParameter("state") == null) {
	/*
	 * initial visit to the page
	 */
	out.println("<a href='" + helper.buildLoginUrl() + "'>log in with google</a>");

} else if (request.getParameter("code") != null && request.getParameter("state").equals("google")) {

	/*
	 * Executes after google redirects to the callback url.
	 * Please note that the state request parameter is for convenience to differentiate
	 * between authentication methods (ex. facebook oauth, google oauth, twitter, in-house).
	 * 
	 * GoogleAuthHelper()#getUserInfoJson(String) method returns a String containing
	 * the json representation of the authenticated user's information. 
	 * At this point you should parse and persist the info.
	 */

	out.println(helper.getUserInfoJson(request.getParameter("code")));
}
%>
[/snippit]

[snippit filename="GoogleAuthHelper.java" label="View Complete File" href="https://github.com/mdanter/OAuth2v1/blob/master/src/main/java/com/danter/google/auth/GoogleAuthHelper.java"]
public final class GoogleAuthHelper {

	/**
	 * Please provide a value for the CLIENT_ID constant before proceeding, set this up at https://code.google.com/apis/console/
	 */
	private static final String CLIENT_ID = "YOUR ID HERE";
	/**
	 * Please provide a value for the CLIENT_SECRET constant before proceeding, set this up at https://code.google.com/apis/console/
	 */
	private static final String CLIENT_SECRET = "SUPER SECRET SAUCE";

	/**
	 * Callback URI that google will redirect to after successful authentication
	 */
	private static final String CALLBACK_URI = "http://localhost:8080/OAuth2v1/index.jsp";
	
	// start google authentication constants
	private static final Iterable<String> SCOPE = Arrays.asList("https://www.googleapis.com/auth/userinfo.profile;https://www.googleapis.com/auth/userinfo.email".split(";"));
	private static final String USER_INFO_URL = "https://www.googleapis.com/oauth2/v1/userinfo";
	private static final JsonFactory JSON_FACTORY = new JacksonFactory();
	private static final HttpTransport HTTP_TRANSPORT = new NetHttpTransport();
	// end google authentication constants
	
	
	private final GoogleAuthorizationCodeFlow flow;
	
	/**
	 * Constructor initializes the Google Authorization Code Flow with CLIENT ID, SECRET, and SCOPE 
	 */
	public GoogleAuthHelper() {
		flow = new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT,
				JSON_FACTORY, CLIENT_ID, CLIENT_SECRET, SCOPE).build();
	}

	/**
	 * Builds a login URL based on client ID, secret, callback URI, and scope 
	 */
	public String buildLoginUrl() {
		
		final GoogleAuthorizationCodeRequestUrl url = flow.newAuthorizationUrl();
		
		return url.setRedirectUri(CALLBACK_URI).setState("google").build();
	}
	
	/**
	 * Expects an Authentication Code, and makes an authenticated request for the user's profile information
	 * @return JSON formatted user profile information
	 * @param authCode authentication code provided by google
	 */
	public String getUserInfoJson(final String authCode) throws IOException {

		final GoogleTokenResponse response = flow.newTokenRequest(authCode).setRedirectUri(CALLBACK_URI).execute();
		final Credential credential = flow.createAndStoreCredential(response, null);
		final HttpRequestFactory requestFactory = HTTP_TRANSPORT.createRequestFactory(credential);
		// Make an authenticated request
		final GenericUrl url = new GenericUrl(USER_INFO_URL);
		final HttpRequest request = requestFactory.buildGetRequest(url);
		request.getHeaders().setContentType("application/json");
		final String jsonIdentity = request.execute().parseAsString();

		return jsonIdentity;

	}
}
[/snippit]

<h2 class="toc">Next Steps</h2>
<p>If you haven't already <a href="https://github.com/mdanter/OAuth2v1" target="_blank">downloaded the code</a> and run it, I suggest you do that before bringing it into your codebase. There are a few Maven dependencies <a href="https://github.com/mdanter/OAuth2v1/blob/master/pom.xml" target="_blank">in the POM</a> that you will need to include.</p>

<p>From here on, you may parse this information using <a href="http://jackson.codehaus.org/" target="_blank">Jackson</a>, and persist it to a database or other data store. These are the basic building blocks with which you should be able to "get the stuff done."</p>

<h3 class="toc">Resources and Links</h3>
<ul>
	<li><a href="http://github.com/mdanter/OAuth2v1">The code on GitHub</a></li>
	<li><a href="https://code.google.com/p/google-api-java-client/wiki/OAuth2">Google APIs Client Library for Java</a></li>
	<li><a href="https://developers.google.com/accounts/docs/OAuth2#libraries">Using OAuth 2.0 to Access Google APIs</a></li>
</ul>

